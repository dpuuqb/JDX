//         Project / File: DelegationPlugins.Entities / CrmSchema.cs
// File generated by: CRM Code Generator - Ahmed Elsawalhy (Yagasoft.com)

using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Linq.Expressions;
using System.Xml.Linq;
using System.Text;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Reflection;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

[assembly: ProxyTypesAssemblyAttribute()]
namespace DelegationPlugins.Entities
{
	#region XrmServiceContext

	/// <summary>
	/// Represents a source of entities bound to a CRM service. It tracks and manages changes made to the retrieved entities.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public partial class XrmServiceContext : OrganizationServiceContext
	{
		/// <summary>
		/// Constructor.
		/// </summary>
		public XrmServiceContext(IOrganizationService service) : 
				base(service)
		{
		}

		/// <summary>
		/// Gets a binding to the set of all <see cref="CustomTrigger"/> entities.
		/// </summary>
		public System.Linq.IQueryable<CustomTrigger> CustomTriggerSet
		{
			get
			{
				return this.CreateQuery<CustomTrigger>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="Delegation"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Delegation> DelegationSet
		{
			get
			{
				return this.CreateQuery<Delegation>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="DelegationReassignConfiguration"/> entities.
		/// </summary>
		public System.Linq.IQueryable<DelegationReassignConfiguration> DelegationReassignConfigurationSet
		{
			get
			{
				return this.CreateQuery<DelegationReassignConfiguration>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="DelegationReassignRecord"/> entities.
		/// </summary>
		public System.Linq.IQueryable<DelegationReassignRecord> DelegationReassignRecordSet
		{
			get
			{
				return this.CreateQuery<DelegationReassignRecord>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="jms_jms_delegationreassignconfiguration_jms"/> entities.
		/// </summary>
		public System.Linq.IQueryable<jms_jms_delegationreassignconfiguration_jms> jms_jms_delegationreassignconfiguration_jmsSet
		{
			get
			{
				return this.CreateQuery<jms_jms_delegationreassignconfiguration_jms>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="SecurityRole"/> entities.
		/// </summary>
		public System.Linq.IQueryable<SecurityRole> SecurityRoleSet
		{
			get
			{
				return this.CreateQuery<SecurityRole>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="User"/> entities.
		/// </summary>
		public System.Linq.IQueryable<User> UserSet
		{
			get
			{
				return this.CreateQuery<User>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="SystemUserRoles"/> entities.
		/// </summary>
		public System.Linq.IQueryable<SystemUserRoles> SystemUserRolesSet
		{
			get
			{
				return this.CreateQuery<SystemUserRoles>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="Team"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Team> TeamSet
		{
			get
			{
				return this.CreateQuery<Team>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="TeamMembership"/> entities.
		/// </summary>
		public System.Linq.IQueryable<TeamMembership> TeamMembershipSet
		{
			get
			{
				return this.CreateQuery<TeamMembership>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="TeamRoles"/> entities.
		/// </summary>
		public System.Linq.IQueryable<TeamRoles> TeamRolesSet
		{
			get
			{
				return this.CreateQuery<TeamRoles>();
			}
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class LinqEntityLimiter : ExpressionVisitor
	{
		protected override Expression VisitNew(NewExpression node)
		{
			var constructor = node.Constructor;
			var parameters = constructor.GetParameters();
			var param = node.Arguments.FirstOrDefault();
			var paramType = param?.Type;

			if (paramType != null && constructor.DeclaringType == paramType
				&& parameters.FirstOrDefault()?.ParameterType == typeof(object))
			{
				var valueGetter = paramType.GetMethod("GetAttributeValue", new[] { typeof(string) })?
					.MakeGenericMethod(typeof(object));

				if (valueGetter != null)
				{
					var limiterType = (node.Arguments.Skip(1).FirstOrDefault() as ConstantExpression)?.Value as Type;

					NewArrayExpression keysInit = null;
					NewArrayExpression valuesInit = null;

					if (limiterType == null && (parameters.Length == 1 || parameters.Skip(1).FirstOrDefault()?.ParameterType == typeof(Type)))
					{
						var attributes = paramType.GetProperties().Cast<MemberInfo>().Union(paramType.GetFields())
							.Where(e => Attribute.IsDefined(e, typeof(AttributeLogicalNameAttribute))).ToArray();

						keysInit = Expression.NewArrayInit(typeof(string), attributes
							.Select(e => Expression.Constant(e.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName)));
						valuesInit = Expression.NewArrayInit(typeof(object), attributes
							.Select(e => Expression.Call(param, valueGetter,
								Expression.Constant(e.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName))));
					}
					else if (limiterType != null && typeof(EntityContract).IsAssignableFrom(limiterType)
						&& parameters.Skip(1).FirstOrDefault()?.ParameterType == typeof(Type))
					{
						var attributes = limiterType.GetProperties().Cast<MemberInfo>().Union(limiterType.GetFields())
							.Where(e => Attribute.IsDefined(e, typeof(CrmFieldMappingAttribute))
								&& !Attribute.IsDefined(e, typeof(CrmRelationMappingAttribute))).ToArray();

						keysInit = Expression.NewArrayInit(typeof(string), attributes
							.Select(e => Expression.Constant(e.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName)));
						valuesInit = Expression.NewArrayInit(typeof(object), attributes
							.Select(e => Expression.Call(param, valueGetter,
								Expression.Constant(e.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName))));
					}

					if (keysInit != null)
					{
						var constructorInfo = paramType.GetConstructor(new[] { typeof(string[]), typeof(object[]) });

						if (constructorInfo != null)
						{
							return Expression.New(constructorInfo, keysInit, valuesInit);
						}
					}
				}
			}

			return base.VisitNew(node);
		}
	}

	/// <summary>
	/// Credits: https://github.com/davidfowl/QueryInterceptor
	/// </summary>
	public static class QueryableExtensions
    {
        public static IQueryable<T> InterceptWith<T>(this IQueryable<T> source, params ExpressionVisitor[] visitors)
        {
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            return new QueryTranslator<T>(source, visitors);
        }
    }

    internal class QueryTranslator<T> : IOrderedQueryable<T>
    {
	    public Type ElementType => typeof(T);
        public Expression Expression { get; }
        public IQueryProvider Provider => provider;

		private readonly QueryTranslatorProvider<T> provider;

        public QueryTranslator(IQueryable source, IEnumerable<ExpressionVisitor> visitors)
        {
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (visitors == null)
            {
                throw new ArgumentNullException(nameof(visitors));
            }

            Expression = Expression.Constant(this);
            provider = new QueryTranslatorProvider<T>(source, visitors);
        }

        public QueryTranslator(IQueryable source, Expression expression, IEnumerable<ExpressionVisitor> visitors)
        {
	        Expression = expression ?? throw new ArgumentNullException(nameof(expression));
            provider = new QueryTranslatorProvider<T>(source, visitors);
        }

        public IEnumerator<T> GetEnumerator()
        {
            return ((IEnumerable<T>)provider.ExecuteEnumerable(Expression)).GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return provider.ExecuteEnumerable(Expression).GetEnumerator();
        }
    }

    internal abstract class QueryTranslatorProvider : ExpressionVisitor
    {
	    internal IQueryable Source { get; }

		protected QueryTranslatorProvider(IQueryable source)
        {
			Source = source ?? throw new ArgumentNullException(nameof(source));
        }
	}

    internal class QueryTranslatorProvider<T> : QueryTranslatorProvider, IQueryProvider
    {
        private readonly IEnumerable<ExpressionVisitor> visitors;

        public QueryTranslatorProvider(IQueryable source, IEnumerable<ExpressionVisitor> visitors)
            : base(source)
        {
	        this.visitors = visitors ?? throw new ArgumentNullException(nameof(visitors));
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            return new QueryTranslator<TElement>(Source, expression, visitors);
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            var elementType = expression.Type.GetGenericArguments().First();
            var result = (IQueryable)Activator.CreateInstance(typeof(QueryTranslator<>).MakeGenericType(elementType),
				Source, expression, visitors);

            return result;
        }

        public TResult Execute<TResult>(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            var result = (this as IQueryProvider).Execute(expression);

            return (TResult)result;
        }

        public object Execute(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            var translated = VisitAll(expression);

            return Source.Provider.Execute(translated);
        }

        internal IEnumerable ExecuteEnumerable(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            var translated = VisitAll(expression);

            return Source.Provider.CreateQuery(translated);
        }

        private Expression VisitAll(Expression expression)
        {
            // Run all visitors in order
            var visitorsQ = new ExpressionVisitor[] { this }.Concat(visitors);
            return visitorsQ.Aggregate(expression, (expr, visitor) => visitor.Visit(expr));
        }

        protected override Expression VisitConstant(ConstantExpression node)
        {
            // Fix up the Expression tree to work with the underlying LINQ provider
	        if (!node.Type.IsGenericType || node.Type.GetGenericTypeDefinition() != typeof(QueryTranslator<>))
	        {
		        return base.VisitConstant(node);
	        }

	        var provider = ((IQueryable)node.Value).Provider as QueryTranslatorProvider;

	        return provider == null ? Source.Expression : provider.Source.Expression;
        }
    }

	#endregion

	#region Extensions

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
    public class ValidationError
    {
        public Guid? RecordId;
        public string AttributeName;

        public ValidationType ErrorType;
        public IDictionary<int, string> ErrorMessage;

        public string StringValue;
        public int? StringMaxLength;

        public decimal? NumericValue;
        public decimal? NumericRangeMin;
        public decimal? NumericRangeMax;
    }

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class ValidationLocalisation
	{
		public ValidationType ErrorType;
		/// <summary>
		/// A dictionary of language code as key and message format as value
		/// </summary>
		public IDictionary<int, string> Localisation;
	}

	public static partial class CrmGeneratorExtensions
	{
		private class RelationProperty
		{
			internal PropertyInfo Property;
			internal RelationshipSchemaNameAttribute RelationAttribute;
		}

		private static IDictionary<string, IEnumerable<RelationProperty>> relationPropertyCache =
			new ConcurrentDictionary<string, IEnumerable<RelationProperty>>();

	    public static IEnumerable<TEntity> ProcessFetchXmlRelations<TEntity>(this IEnumerable<TEntity> entitiesParam, string fetchXml)
			where TEntity : GeneratedEntityBase
	    {
		    if (string.IsNullOrWhiteSpace(fetchXml))
		    {
				throw new ArgumentNullException(nameof(fetchXml));
		    }

		    if (entitiesParam == null)
		    {
				throw new ArgumentNullException(nameof(entitiesParam));
		    }

		    var entities = entitiesParam.ToArray();

		    if (!entities.Any())
		    {
			    return new TEntity[0];
		    }

		    foreach (var entity in entities)
			{
				var depth = 0;
				ProcessEntity(entity, entity, XElement.Parse(fetchXml).Element("entity"), ref depth);
			}

		    return entities.GroupBy(e => e.Id).Select(ConsolidateEntity).Where(e => e?.Id != Guid.Empty);
	    }

	    private static void ProcessEntity(Entity baseEntity, GeneratedEntityBase targetEntity, XElement xmlElement,
			ref int depth, string intersectingEntity = null)
	    {
		    foreach (var xLink in xmlElement.Elements("link-entity"))
		    {
			    depth++;

			    var linkedName = xLink.Attribute("name")?.Value;
			    var from = xLink.Attribute("from")?.Value;
			    var to = xLink.Attribute("to")?.Value;
			    var alias = GetLinkAlias(xLink, depth);

			    if (string.IsNullOrWhiteSpace(linkedName))
			    {
				    throw new ArgumentNullException(nameof(linkedName), "Linked entity name could not be found in FetchXML.");
			    }

			    if (string.IsNullOrWhiteSpace(from))
			    {
				    throw new ArgumentNullException(nameof(from), 
						$"'from' value could not be found in FetchXML for '{linkedName}'.");
			    }

			    if (string.IsNullOrWhiteSpace(to))
			    {
				    throw new ArgumentNullException(nameof(to), 
						$"'to' value could not be found in FetchXML for '{linkedName}'.");
			    }

			    if (string.IsNullOrWhiteSpace(alias))
			    {
				    throw new ArgumentNullException(nameof(alias), 
						$"'alias' value could not be found in FetchXML for '{linkedName}'.");
			    }

			    var relationParameters = targetEntity.RelationProperties
				    .Select(p => p.Value)
				    .Where(p => p.Length >= 5)
				    .FirstOrDefault(p => p[1].ToString() == linkedName && p[3].ToString() == from && p[4].ToString() == to);
			    var isNn = false;

			    if (relationParameters == null)
			    {
					// intersecting
				    relationParameters = targetEntity.RelationProperties
					    .Select(p => p.Value)
					    .Where(p => p.Length >= 9)
					    .FirstOrDefault(p => linkedName == p[2].ToString());
					isNn = true;

				    if (relationParameters == null)
				    {
					    relationParameters = targetEntity.RelationProperties
						    .Select(p => p.Value)
						    .Where(p => p.Length >= 3)
						    .FirstOrDefault(p => p[2].ToString() == intersectingEntity);
						isNn = false;

					    if (relationParameters == null)
					    {
						    continue;
					    }
				    }
			    }

			    var role = (relationParameters[8] as Type)?.IsArray == true ? EntityRole.Referenced : EntityRole.Referencing;
			    var schemaName = relationParameters[7].ToString();

			    var relationProperties = GetRelationInfoCache(targetEntity);

			    var relationProperty = relationProperties.FirstOrDefault(pa =>
				    pa.RelationAttribute.SchemaName == schemaName
					    && (pa.RelationAttribute.PrimaryEntityRole == role || pa.RelationAttribute.PrimaryEntityRole == null))?
				    .Property;
			    var propertyType = relationProperty?.PropertyType;

			    if (propertyType == null)
			    {
				    continue;
			    }

			    var relatedEntity = PrepareRelation(targetEntity, relationProperty);

			    if (relatedEntity == null)
			    {
				    continue;
			    }

			    foreach (var xAttribute in xLink.Elements("attribute"))
			    {
				    ProcessXAttribute(baseEntity, relatedEntity, alias, xAttribute);
			    }

			    if (xLink.Elements("all-attributes").Any())
			    {
				    ProcessAllAttributes(baseEntity, relatedEntity, alias);
			    }

				// go over the related entity as well for its own relations
			    ProcessEntity(baseEntity, isNn ? targetEntity : relatedEntity, xLink, ref depth, isNn ? linkedName : null);
		    }
	    }

		private static IEnumerable<RelationProperty> GetRelationInfoCache(GeneratedEntityBase targetEntity)
		{
			if (!relationPropertyCache.TryGetValue(targetEntity.LogicalName, out var relationProperties))
			{
				relationProperties = relationPropertyCache[targetEntity.LogicalName] =
					targetEntity.GetType().GetProperties()
						.Where(p => Attribute.IsDefined(p, typeof(RelationshipSchemaNameAttribute)))
						.Select(p =>
							new RelationProperty
							{
								Property = p,
								RelationAttribute = p.GetCustomAttribute<RelationshipSchemaNameAttribute>()
							});
			}

			return relationProperties;
		}

		private static string GetLinkAlias(XElement xLink, int depth)
	    {
		    var linkedName = xLink.Attribute("name")?.Value;

		    if (string.IsNullOrWhiteSpace(linkedName))
		    {
			    return null;
		    }

		    var alias = xLink.Attribute("alias")?.Value;

		    if (string.IsNullOrWhiteSpace(alias))
		    {
			    alias = $"{linkedName}{depth}";
		    }

		    return alias;
	    }

	    private static GeneratedEntityBase PrepareRelation(GeneratedEntityBase targetEntity, PropertyInfo relationProperty)
	    {
		    var propertyType = relationProperty?.PropertyType;

		    if (propertyType == null)
		    {
			    return null;
		    }

		    var isArray = typeof(IEnumerable).IsAssignableFrom(propertyType);
		    var relatedEntityType = propertyType;

		    if (isArray)
		    {
			    relatedEntityType = propertyType.GetElementType();
		    }

		    if (relatedEntityType == null)
		    {
			    return null;
		    }

		    var relatedEntity = Activator.CreateInstance(relatedEntityType) as GeneratedEntityBase;

		    if (relatedEntity == null)
		    {
			    return null;
		    }

		    object relatedValue = relatedEntity;
		    var currentValue = relationProperty.GetValue(targetEntity);

		    if (isArray)
		    {
			    var relatedList = (object[])(currentValue ?? Activator.CreateInstance(propertyType, 1));
			    relatedList[0] = relatedEntity;
			    relatedValue = relatedList;
		    }
		    else if (currentValue != null)
		    {
			    // already parsed N-1
			    return null;
		    }

		    relationProperty.SetValue(targetEntity, relatedValue);

		    return relatedEntity;
	    }

		private static void ProcessXAttribute(Entity baseEntity, GeneratedEntityBase relatedEntity, string relatedAlias,
			XElement xAttribute)
		{
			var	attributeName = xAttribute.Attribute("name")?.Value;
			var attributeAlias = xAttribute.Attribute("alias")?.Value;
			var isAliasedSame = string.IsNullOrWhiteSpace(relatedAlias) || attributeName == attributeAlias;

			if (!string.IsNullOrWhiteSpace(attributeAlias))
			{
				attributeName = attributeAlias;
			}

			ProcessAttribute(baseEntity, relatedEntity, relatedAlias, attributeName, isAliasedSame);
		}

		private static void ProcessAttribute(Entity baseEntity, GeneratedEntityBase relatedEntity, string relatedAlias,
			string attributeName, bool isAliasedSame)
	    {
		    var attribute = baseEntity.Attributes
			    .FirstOrDefault(a => !string.IsNullOrWhiteSpace(relatedAlias) && a.Key == $"{relatedAlias}.{attributeName}").Value
			    ?? baseEntity.Attributes
				    .FirstOrDefault(a => isAliasedSame && a.Key == attributeName).Value;

		    if (attribute is AliasedValue)
		    {
			    var aliasedValue = attribute as AliasedValue;
			    relatedEntity[aliasedValue.AttributeLogicalName] = aliasedValue.Value;
			    return;
		    }

		    if (attribute != null)
		    {
			    relatedEntity[attributeName] = attribute;
		    }
	    }

		private static void ProcessAllAttributes(Entity baseEntity, GeneratedEntityBase relatedEntity, string relatedAlias)
		{
			var attributes = baseEntity.Attributes
				.Where(a =>
					string.IsNullOrWhiteSpace(relatedAlias)
						? !a.Key.Contains($".")
						: a.Key.StartsWith($"{relatedAlias}."));

			foreach (var pair in attributes)
			{
				var attribute = pair.Value;

				AliasedValue aliasedValue;

				if (attribute is AliasedValue)
				{
					aliasedValue = attribute as AliasedValue;
					relatedEntity[aliasedValue.AttributeLogicalName] = aliasedValue.Value;
					continue;
				}

				if (attribute != null)
				{
					relatedEntity[pair.Key] = attribute;
				}
			}
	    }

	    private static TEntity ConsolidateEntity<TEntity>(IGrouping<Guid, TEntity> grouping)
		    where TEntity : GeneratedEntityBase
	    {
		    if (!grouping.Any())
		    {
			    return null;
		    }

		    var baseEntity = grouping.First();

		    var relationProperties = GetRelationInfoCache(baseEntity);
		    var baseRelationProperties = relationProperties
			    .Where(x => x.Property.PropertyType.IsArray
				    && (x.RelationAttribute.PrimaryEntityRole == EntityRole.Referenced
					    || x.RelationAttribute.PrimaryEntityRole == null)).ToArray();

		    foreach (var entity in grouping.Skip(1))
		    {
			    foreach (var relationProperty in baseRelationProperties)
			    {
				    var currentBaseRelationInfo = baseRelationProperties
					    .FirstOrDefault(x => x.RelationAttribute.SchemaName == relationProperty.RelationAttribute.SchemaName)?
						.Property;
				    var currentRelation = (GeneratedEntityBase[])relationProperty.Property.GetValue(entity);

				    if (currentBaseRelationInfo == null || currentRelation == null)
				    {
					    relationProperty.Property.SetValue(baseEntity, null);
					    continue;
				    }

				    var currentBaseRelation = ((GeneratedEntityBase[])currentBaseRelationInfo.GetValue(baseEntity))?
						.Where(e => e?.Id != Guid.Empty).ToArray();

					if (currentBaseRelation == null || !currentBaseRelation.Any())
					{
						currentBaseRelationInfo.SetValue(baseEntity, null);
						continue;
					}

					var baseLength = currentBaseRelation?.Length ?? 0;

				    var newBaseRelation = (GeneratedEntityBase[])Activator.CreateInstance(currentRelation.GetType(), baseLength + 1);

				    if (currentBaseRelation?.Length > 0)
				    {
					    Array.Copy(currentBaseRelation, newBaseRelation, baseLength);
				    }

				    Array.Copy(currentRelation.Where(e => e?.Id != Guid.Empty).ToArray(), 0, newBaseRelation, baseLength, 1);
				    currentBaseRelationInfo.SetValue(baseEntity, newBaseRelation);
			    }
		    }

		    foreach (var baseRelationPropertyInfo in baseRelationProperties)
		    {
			    var baseRelationProperty = baseRelationPropertyInfo.Property;

				var currentRelation = (GeneratedEntityBase[])baseRelationProperty.GetValue(baseEntity);
				var currentRelationFiltered = currentRelation?.Where(e => e?.Id != Guid.Empty).ToArray();

				if (currentRelationFiltered == null || !currentRelationFiltered.Any())
			    {
					baseRelationProperty.SetValue(baseEntity, null);
				    continue;
			    }

			    var related = currentRelation.GroupBy(e => e.Id).Select(ConsolidateEntity)
					.Where(e => e?.Id != Guid.Empty).ToArray();

				if (related == null || !related.Any())
				{
					baseRelationProperty.SetValue(baseEntity, null);
					continue;
				}

				var newRelation = (GeneratedEntityBase[])Activator.CreateInstance(currentRelation.GetType(), related.Length);
			    Array.Copy(related, newRelation, related.Length);
				baseRelationProperty.SetValue(baseEntity, newRelation);
		    }

		    return baseEntity;
	    }
		
		/// <summary>
		/// Converts an enum constant to an OptionSetValue object..
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.IndustryCode.Accounting'</param>
		/// <returns>The OptionSetValue object.</returns>
		public static OptionSetValue ToOptionSetValue(this Enum enumMember)
		{
			return new OptionSetValue(int.Parse(enumMember.ToString("d")));
		}

		/// <summary>
		///     Calling this method on a LINQ will result in limiting attributes retrieved from CRM on any early-bound entity in
		///     the query.<br />
		///     The properties defined in the entity's class will be the ones retrieved from CRM by default; all other attributes
		///     in CRM will be ignored.<br />
		///     The entity <b>must</b> be passed to a constructor of the same type.<br />
		///     Example:
		///     <code>
		/// (from account in new XrmServiceContext(service).AccountSet
		/// select new Account(account)).ToList()
		/// </code>
		/// </summary>
		public static IQueryable<TEntity> LimitAttributes<TEntity>(this IQueryable<TEntity> q) where TEntity : Entity
		{
			return q.InterceptWith(new LinqEntityLimiter());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run. Default is all.</param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorsMessage(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "Range", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
				&& validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrorMessages = GetValidationErrorMessages(entityRecord, validationLocalisation);

			if (validationErrorMessages.Any())
			{
				return validationErrorMessages.Aggregate(
					(message1, message2) => message1 + "\r\n-----------------------\r\n" + message2);
			}

			return null;
		}

		private static readonly ValidationLocalisation[] validationLocationsDefaults =
		{
			new ValidationLocalisation
			{
				ErrorType = ValidationType.Required,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, "Value cannot be null."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.Range,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute value must be between ""{0}"" and ""{1}"", inclusive. Actual value was ""{2}""."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.MaxLength,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute length must be less than ""{0}"". Actual attribute value was ""{1}""."}
				               }
			}
		};

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorMessages(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "Range", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
			    && validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrors = GetValidationErrors(entityRecord, validationLocalisation);

			if (validationErrors.Any())
			{
				var messages = validationErrors.Select(error => error.ErrorMessage.Values.First()).ToList();
				var id = ((dynamic)entityRecord).Id;
				messages.Insert(0, string.Format("Record of type \"{0}\"" + (id != null ? " and ID \"{1}\"" : "")
													+ " has invalid values.", entityRecord.GetType().Name, id));
				return messages;
			}

			return null;
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrors(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		///  <summary>
		///      Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///      Validation checks: required, numeric value range, and string length.<br />
		///  </summary>
		///  <param name="validationLocalisation">
		///      [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///      For validation type "Range", the message format takes three params for min, max, and actual value respectively;
		///          e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///      For validation type "MaxLength", the message format takes two params;
		/// 		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///      Default is a check on all validation types.
		///  </param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			var id = ((dynamic) entityRecord).Id;
			var fields = entityRecord.GetType().GetProperties();
			var exceptions = new List<ValidationError>();

			validationLocalisation = validationLocalisation ?? validationLocationsDefaults;


			return exceptions;
		}

		public static TEntity ConvertTo<TEntity>(this GeneratedEntityBase crmRecord) where TEntity : EntityContract
		{
			// create entity object
			var record = Activator.CreateInstance<TEntity>();

			var entityType = typeof(TEntity);
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;
			var properties = entityType.GetProperties().ToArray();

			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("CRM entity '{0}' doesn't map to entity '{1}'.",
					crmRecord.GetType().Name, entityType.Name));
			}

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in properties
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				SetValueInRecord(record, field, crmRecord, mapping);
			}

			var relations = properties
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))).ToArray();

			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in relations)
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				SetRelationInRecord(record, relation, crmRecord, mapping);
			}

			var flattableRelations = relations
				.Select(r =>
					new
					{
						r,
						p = properties
							.Where(p => Attribute.IsDefined(p, typeof(CrmFieldMappingAttribute))
								   && Attribute.IsDefined(p, typeof(CrmRelationMappingAttribute)))
							.Where(
								p =>
								{
									var rAttr = r.GetCustomAttribute<CrmRelationMappingAttribute>();
									var pAttr = p.GetCustomAttribute<CrmRelationMappingAttribute>();
									return rAttr.SchemaName == pAttr.SchemaName
										&& rAttr.Role == pAttr.Role;
								})
					})
				.Where(r => r.p.Any());

			// go over flattened relations in the contract entity that has the mapping attribute
			foreach (var r in flattableRelations)
			{
				SetRelationInRecord(record, r.r, r.p);
			}

			return record;
		}

		private static void SetValueInRecord<TEntity>(TEntity entity, PropertyInfo field, GeneratedEntityBase crmRecord,
			CrmFieldMappingAttribute mapping)
			where TEntity : EntityContract
		{
			// if key not found, then the CRM record doesn't have that value set
			var crmValue = crmRecord.GetAttributeValue<object>(mapping.LogicalName);

			if (crmValue == null)
			{
				return;
			}

			var crmField = crmRecord.GetType().GetProperties()
				.FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(AttributeLogicalNameAttribute))
					&& propQ.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName == mapping.LogicalName);

			if (crmField == null)
			{
				return;
			}

			var value = crmField.GetValue(crmRecord);

			if (value == null)
			{
				return;
			}

			// convert types
			if (value is Enum)
			{
				var underlyingType = Nullable.GetUnderlyingType(field.PropertyType);

				if (underlyingType == null)
				{
					return;
				}

				// can't set enum value with int using reflection!
				field.SetValue(entity, Enum.ToObject(underlyingType, Convert.ToInt32(value)));

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else if (crmValue is EntityReference)
			{
				var entityRef = (EntityReference) crmValue;

				if (field.PropertyType == typeof(Guid?))
				{
					field.SetValue(entity, entityRef.Id);
				}
				else if (field.PropertyType == typeof(LookupValue))
				{
					field.SetValue(entity, new LookupValue(entityRef.LogicalName, entityRef.Id));
				}

				var nameField = typeof(TEntity).GetProperties().FirstOrDefault(fieldQ => fieldQ.Name == field.Name + "Name");

				if (nameField != null && entityRef.Name != null)
				{
					nameField.SetValue(entity, entityRef.Name);
				}

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(LabelAttribute))
                        && propQ.GetCustomAttribute<LabelAttribute>().FieldLogicalName == labelsProperty.GetCustomAttribute<LabelAttribute>().FieldLogicalName);

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else
			{
				field.SetValue(entity, value);
			}
		}

		private static void SetRelationInRecord<TEntity>(TEntity record, PropertyInfo field, Entity crmRecord,
			CrmRelationMappingAttribute mapping)
			where TEntity : EntityContract
		{
			var crmRelation = crmRecord.GetType().GetProperties()
				.FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(RelationshipSchemaNameAttribute))
					&& propQ.GetCustomAttribute<RelationshipSchemaNameAttribute>().SchemaName == mapping.SchemaName
					&& propQ.GetCustomAttribute<RelationshipSchemaNameAttribute>().PrimaryEntityRole.ToString() == mapping.Role.ToString());

			if (crmRelation == null)
			{
				return;
			}

			var fieldType = field.PropertyType;

			object convertedValue = null;

			// x-N relation
			if (typeof(Array).IsAssignableFrom(fieldType))
			{
				var value = crmRelation.GetValue(crmRecord) as Array;

				if (value == null || value.Length <= 0)
				{
					return;
				}

				// get the contract type for the relation
				var elementType = fieldType.GetElementType();

				if (elementType == null)
				{
					return;
				}

				// create an array for the related entities of the appropriate type
				var relatedRecords = Array.CreateInstance(elementType, value.Length);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = MethodBase.GetCurrentMethod().DeclaringType?
					.GetMethod("ConvertTo")?.MakeGenericMethod(elementType);

				if (method == null)
				{
					return;
				}

				// convert all entities to contract entities
				var objectRelatedRecords =
					(from object relatedRecord in value
					 select method.Invoke(relatedRecord, new[] { relatedRecord })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectRelatedRecords, relatedRecords, relatedRecords.Length);
				convertedValue = relatedRecords;
			}
			else if (typeof(EntityContract).IsAssignableFrom(fieldType))
			{
				var value = crmRelation.GetValue(crmRecord) as GeneratedEntityBase;

				if (value == null)
				{
					return;
				}

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = MethodBase.GetCurrentMethod().DeclaringType?
					.GetMethod("ConvertTo")?.MakeGenericMethod(fieldType);

				if (method == null)
				{
					return;
				}

				convertedValue = method.Invoke(value, new object[] { value });
			}

			// set the related entities value in the entity
			field.SetValue(record, convertedValue);
		}

		private static void SetRelationInRecord(object record, PropertyInfo relationInfo, IEnumerable<PropertyInfo> flatPropertiesP)
		{
			var relation = relationInfo.GetValue(record);

			if (relation == null)
			{
				return;
			}

			var flatProperties = flatPropertiesP.ToArray();

			var relationProperties = relationInfo.PropertyType.GetProperties()
				.Where(p => Attribute.IsDefined(p, typeof(CrmFieldMappingAttribute))
					&& !Attribute.IsDefined(p, typeof(CrmRelationMappingAttribute)));

			foreach (var relationProperty in relationProperties)
			{
				var flatProperty = flatProperties
					.FirstOrDefault(f => f.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName
						== relationProperty.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName);

				if (flatProperty == null)
				{
					continue;
				}

				flatProperty.SetValue(record, relationProperty.GetValue(relation));
			}

			relationInfo.SetValue(record, null);
		}

		/// <summary>
		/// Returns an array of logical names whose property is marked for WCF contract.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetDataMemberAttributes(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(DataMemberAttribute)) && Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Returns an array of logical names of the properties.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetAttributeNames(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)) && !Attribute.IsDefined(fieldQ, typeof(RelationshipSchemaNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Loads the values of data member properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		public static void LoadDataMemberAttributes(this Entity entity, IOrganizationService service)
		{
			LoadAttributeValues(entity, service, entity.GetDataMemberAttributes());
		}

		/// <summary>
		/// Loads the values of all properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		/// <param name="attributes"></param>
		public static void LoadAttributeValues(this Entity entity, IOrganizationService service, params string[] attributes)
		{
			try
			{
				entity.Id = entity.Id;
			}
			catch
			{
				throw new Exception("Entity is ready only. Set 'MergeOption' to 'NoTracking' in the context used for fetching this entity.");
			}

			var isLoadAll = attributes == null || attributes.Length <= 0;

			if (isLoadAll)
			{
				entity.Attributes.Clear();
			}

			foreach (var attribute in service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(isLoadAll ? entity.GetAttributeNames() : attributes)).Attributes)
			{
				entity[attribute.Key] = attribute.Value;
			}
		}
	}

	#endregion

	#region Helpers

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntityBase : Entity	{
		protected GeneratedEntityBase()
		{}

		protected GeneratedEntityBase(string logicalName) : base(logicalName)
		{}

		/// <summary>
		///     Initialises this entity with the given keys and values.
		/// </summary>
		protected GeneratedEntityBase(string[] keys, object[] values, string logicalName) : this(logicalName)
		{
			for (var i = 0; i < keys.Length; i++)
			{
				var key = keys[i];
				var value = values[i];

				if (value == null)
				{
					continue;
				}

				Attributes[key] = value;
			}
		}

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type.<br />
		/// <b>OR</b> ...<br />
		///     Constructor that Limits attributes retrieved from CRM on any early-bound entity in a LINQ query.<br />
		///     The properties and fields defined in this class will be the ones retrieved from CRM by default; all other attributes
		///     in CRM will be ignored.<br />
		///     The selected early-bound record of this class's type in the query <b>must</b> be passed to this constructor.<br />
		///     Example:
		///     <code>
		/// (from account in new XrmServiceContext(service).AccountSet
		/// select new Account(account)).ToList()
		/// </code>
		/// </summary>
		protected GeneratedEntityBase(object obj, string logicalName) : base(logicalName)
		{ }

		/// <summary>
		///     Limits attributes retrieved from CRM on any early-bound entity in a LINQ.<br />
		///     The properties and fields defined in the 'limitingType' class will be the ones retrieved from CRM by default;
		///     all other attributes in CRM will be ignored.<br />
		///     The selected early-bound record of this class's type in the query <b>must</b> be passed to this constructor.<br />
		///     Example:
		///     <code>
		/// (from account in new XrmServiceContext(service).AccountSet
		/// select new Account(account, typeof(AccountModel))).ToList()
		/// </code>
		/// </summary>
		protected GeneratedEntityBase(object obj, Type limitingType, string logicalName) : base(logicalName)
		{ }

		[DataMember]
		private List<string> NullValuedAttributes { get; set; }
		internal IList<QueryAction> DeferredQueriesList = new List<QueryAction>();
		protected IDictionary<string, object[]> relationProperties;
		public virtual IDictionary<string, object[]> RelationProperties { get { return new Dictionary<string, object[]>(); } }

		#region Serialisation events

		[OnDeserialized]
		private void DeserializedInitializer(StreamingContext ctx)
		{
			LogicalName = (string)GetType().GetField("EntityLogicalName").GetRawConstantValue();
			Attributes.Where(attribute => attribute.Value == null).ToList().ForEach(attribute => Attributes.Remove(attribute.Key));
			if (NullValuedAttributes != null && NullValuedAttributes.Count > 0)
			{
				NullValuedAttributes.ForEach(attribute =>
				{
					var property = GetType().GetProperty(attribute);
					if (property == null)
					{
						throw new Exception("Couldn't find the property '" + attribute + "' in entity.");
					}
					property.SetValue(this, null);
				});
			}
		}

		#endregion

		public XrmServiceContext ServiceContext { get; set; }

		public void LoadLookupLabels(IOrganizationService service, bool isDeferred = false)
		{
			var properties = from propQ in this.GetType().GetProperties()
			                 let propIdQ = this.GetType().GetProperty(propQ.Name.Replace("Labels", ""))
			                 where Attribute.IsDefined(propQ, typeof(LabelAttribute))
			                       && (Guid?) propIdQ.GetValue(this) != null
			                 select new
			                        {
				                        property = propQ,
				                        id = propIdQ.GetValue(this),
				                        attribute = propQ.GetCustomAttribute<LabelAttribute>()
			                        };

			foreach (var property in properties)
			{
				var fields = property.attribute.LabelFieldNames.Split(',');

				var query = new QueryExpression(property.attribute.LogicalName);
				query.Criteria.AddCondition(property.attribute.IdFieldName, ConditionOperator.Equal, property.id);
				query.ColumnSet = new ColumnSet(fields.Select(field => field.Substring(5)).ToArray());

				var queryAction =
					new QueryAction(query)
					{
						Action =
							result =>
							{
								var response = result as RetrieveMultipleResponse;
								if (response == null) return;

								var entityQ = response.EntityCollection.Entities.FirstOrDefault();
								if (entityQ == null) return;

								var englishLabel = (string) entityQ.Attributes.FirstOrDefault(
									attribute => ("1033_" + attribute.Key) == fields.FirstOrDefault(field => field.Contains("1033_"))).Value;
								var dictionary = new Dictionary<int, string>();
								dictionary[1033] = englishLabel;
								property.property.SetValue(this, dictionary);
							}
					};

				if (isDeferred)
				{
					this.DeferredQueriesList.Add(queryAction);
				}
				else
				{
					queryAction.Action.Invoke(service.Execute(new RetrieveMultipleRequest{Query = query}));
				}
			}
		}

		#region Relationship methods

		protected override IEnumerable<TEntity> GetRelatedEntities<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
		    var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && enumerable == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);

			return enumerable;
		}

		protected override TEntity GetRelatedEntity<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
			var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && result == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);
			
			return result;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntity<TRelationName> : GeneratedEntityBase where TRelationName : RelationNameBase
	{
		protected GeneratedEntity(string logicalName) : base(logicalName)
		{ }

		/// <inheritdoc/>
		protected GeneratedEntity(string[] keys, object[] values, string logicalName) : base(keys, values, logicalName)
		{ }

		/// <inheritdoc/>
		protected GeneratedEntity(object obj, Type limitingType, string logicalName) : base(obj, limitingType, logicalName)
		{ }

		/// <inheritdoc/>
		protected GeneratedEntity(object obj, string logicalName) : base(obj, logicalName)
		{ }

		#region Relationship methods

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, params string[] attributes)
		{
			return LoadRelation(relationName, service, false, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, filter, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, null, attributes);
		}

		/// <summary>
		/// Fetch the next page of records related to this entity on this relationship using the previous paging info object returned.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, pagingInfo.RecordCountLimit, pagingInfo.NextPage, pagingInfo.Cookie, pagingInfo.Filter, pagingInfo, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, filter, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			if (RelatedEntities.IsReadOnly) {
				throw new Exception("Relationship collection is ready only. The context that loaded this entity from CRM must be passed as a parameter, " +
									"or set 'MergeOption' to 'NoTracking' in the context before fetching this entity using LINQ.");
			}
			if (!RelationProperties.ContainsKey(relationName.Name)) {
				throw new Exception("Relation does not exist in entity, or is not generated.");
			}
			var relationPagingInfo = pagingInfo ?? new RelationPagingInfo
				{
					RecordCountLimit = recordCountLimit,
					Filter = filter,
					Cookie = cookie,
					NextPage = page
				};
			var relationParams = RelationProperties[relationName.Name];
			var queryActionObject = new QueryAction(GeneratorHelpers.GetLoadRelationQuery(this, service, (string) relationParams[1], (string) relationParams[2], (string) relationParams[3], (string) relationParams[4], (string) relationParams[5], (string) relationParams[6],
					recordCountLimit, page, cookie, filter, attributes));
			var queryAction = queryActionObject.Action =
							  resultQ => {
								  var response = resultQ as RetrieveMultipleResponse;
								  var entityType = ((Type) relationParams[8]).GetElementType() ?? (Type) relationParams[8];
					              var resultArray = response == null ? ((List<Entity>) resultQ).Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray()
	    				              : response.EntityCollection.Entities.Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray();
					              var relatedRecords = Array.CreateInstance(entityType, resultArray.Length);
					              Array.Copy(resultArray, relatedRecords, resultArray.Length);
								  DeferredQueriesList.Remove(queryActionObject);
								  var newValue = relatedRecords.Length <= 0 ? null : (((Type) relationParams[8]).GetElementType() == null ? relatedRecords.GetValue(0) : relatedRecords);
								  GetType().GetProperty((string) relationParams[0]).SetValue(this, newValue);
							  };
			if (isDeferred) DeferredQueriesList.Add(queryActionObject);
			else queryAction.Invoke(GeneratorHelpers.LoadRelation(service, queryActionObject.Query, recordCountLimit, page, cookie, relationPagingInfo));
			return relationPagingInfo;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class RelationPagingInfo
	{
		public string Cookie;
		public int NextPage = 1;
		public int RecordCountLimit = -1;
		public FilterExpression Filter;
		public bool IsMoreRecords = true;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class RelationNameBase
	{
		public string Name;

		public RelationNameBase(string name)
		{
			Name = name;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	internal class QueryAction
	{
		public QueryExpression Query { get; set; }
		public Action<object> Action { get; set; }

		public QueryAction(QueryExpression query, Action<object> action = null)
		{
			Query = query;
			Action = action;
		}
	}

	public enum ValidationType
	{
		Required,
		Range,
		MaxLength
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class LookupKeysBase
	{
		public string Name;

		protected LookupKeysBase(string name)
		{
			Name = name;
		}
	}

	public interface ILookupKeys<in TKey> where TKey : LookupKeysBase
	{
		void AddKey(TKey key, object value);
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract]
	public class CrmActionBase<TInputs, TOutputs>
		where TInputs : CrmActionBase<TInputs, TOutputs>.InputsBase, new()
		where TOutputs : CrmActionBase<TInputs, TOutputs>.OutputsBase, new()
	{
		public IOrganizationService Service;
		public OrganizationRequest Request;
		public OrganizationResponse Response;
		public TInputs InputParams;
		public TOutputs OutputFields;
		
		public CrmActionBase(string actionName)
		{
			Request = new OrganizationRequest(actionName);
			InputParams = new TInputs() { Request = Request };
		}
		
		public CrmActionBase(IOrganizationService service, string actionName) : this(actionName)
		{
			Service = service;
		}

		public TOutputs Execute(IOrganizationService service = null)
		{
			if (service != null)
			{
				Service = service;
			}

			Response = Service.Execute(Request);

			return OutputFields = new TOutputs() { Response = Response };
		}
				
		public abstract class InputsBase
		{
			public OrganizationRequest Request;

			public InputsBase()
			{ }

			public InputsBase(OrganizationRequest request)
			{
				Request = request;
			}
		}
		
		public abstract class OutputsBase
		{
			public OrganizationResponse Response;

			public OutputsBase()
			{ }

			public OutputsBase(OrganizationResponse response)
			{
				Response = response;
			}
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static partial class GeneratorHelpers
	{
		#region Enums

		/// <summary>
		/// Get the value that corresponds to the label from the option-set,
		/// using the type of the class enclosing both, label type, and the language code given.
		/// </summary>
		/// <param name="labelType">The type of the class containing the labels; e.g.: 'typeof(Account.Enums.Labels.IndustryCode)'</param>
		/// <param name="label">The label to search for, corresponding to the value</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(Type labelType, string label, int languageCode = 1033)
		{
			var labelsType = labelType.DeclaringType;

			if (labelsType == null)
			{
				return -1;
			}

			var enumsType = labelsType.DeclaringType;

			if (enumsType == null)
			{
				return -1;
			}

			// get the fields with the same label from the label class
			var fields = labelType.GetFields()
				.Where(fieldQ => fieldQ.Name.Contains(languageCode.ToString())
					&& (string)fieldQ.GetValue(labelType) == label);

			if (!fields.Any())
			{
				return -1;
			}

			var field = fields.First();

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				return -1;
			}

			var enumType = entityType.GetNestedType(labelType.Name + "Enum");

			if (enumType == null)
			{
				return -1;
			}

			// get the enum constant corresponding to the field name
			var enumConstant = Enum.Parse(enumType, field.Name.Replace("_" + languageCode, ""));

			return (int)enumConstant;
		}

		/// <summary>
		/// Gets the value corresponding to the option-set's label using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="label">The label from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(string logicalName, string label, Type enumsType, int languageCode = 1033)
		{
			var labelType = GetLabelType(enumsType, logicalName);

			return GetValue(labelType, label, languageCode);
		}

		private static Type GetEnumType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				throw new Exception("Can't find the entity type from the enum type.");
			}

			return field == null ? null : entityType.GetNestedType(field.Name + "Enum");
		}

		#endregion

		#region Labels

		/// <summary>
		/// Gets the label corresponding to the option-set's value using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="constant">The value from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns></returns>
		public static string GetLabel(string logicalName, int constant, Type enumsType, int languageCode = 1033)
		{
			var enumType = GetEnumType(enumsType, logicalName);

			if (enumType == null)
			{
				return null;
			}

			var enumName = enumType.Name;
			var constantName = enumType.GetEnumName(constant);
			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return null;
			}

			var labelType = labelsType.GetNestedType(enumName.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return null;
			}

			var field = labelType.GetField(constantName + "_" + languageCode);

			return field == null ? null : field.GetValue(labelType).ToString();
		}

		private static Type GetLabelType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);
			return enumsType.GetNestedType("Labels").GetNestedType(field.Name);
		}

		#endregion

		private static FieldInfo GetLogicalNameField(Type enumsType, string logicalName)
		{
			var namesType = enumsType.GetNestedType("Names");
			return namesType.GetFields().FirstOrDefault(fieldQ => (string)fieldQ.GetValue(namesType) == logicalName);
		}

		internal static QueryExpression GetLoadRelationQuery(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1, string cookie = null,
			FilterExpression filter = null, params string[] attributes)
		{
			limit = limit <= 0 ? int.MaxValue : limit;

			// create the query taking into account paging
			var query = new QueryExpression(fromEntityName);
			query.LinkEntities.Add(new LinkEntity(fromEntityName, toEntityName, fromFieldName, toFieldName, JoinOperator.Inner));
			query.LinkEntities[0].EntityAlias = "linkedEntityAlias";
			query.Criteria.AddCondition("linkedEntityAlias", intersectIdFieldName, ConditionOperator.Equal, entity[idFieldName]);

			if (filter != null)
			{
				query.Criteria.AddFilter(filter);
			}

			if (attributes.Length == 1 && attributes[0] == "*")
			{
				query.ColumnSet = new ColumnSet(true);
			}
			else if (attributes.Length > 0)
			{
				query.ColumnSet = new ColumnSet(attributes);
			}
			else
			{
				query.ColumnSet = new ColumnSet(false);
			}

			query.PageInfo = new PagingInfo
			{
				PageNumber = page <= 0 ? 1 : page,
				Count = limit,
				PagingCookie = cookie
			};

			return query;
		}

		internal static List<Entity> LoadRelation(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1,
			FilterExpression filter = null, string cookie = null, RelationPagingInfo relationPagingInfo = null, params string[] attributes)
		{
			return LoadRelation(service, GetLoadRelationQuery(entity, service, fromEntityName, toEntityName,
				fromFieldName, toFieldName, idFieldName, intersectIdFieldName, limit, page, cookie,
				filter, attributes), limit, page, cookie, relationPagingInfo);
		}

		public static List<Entity> LoadRelation(IOrganizationService service, QueryExpression query,
			int limit = -1, int page = -1, string cookie = null, RelationPagingInfo relationPagingInfo = null)
		{
			limit = limit <= 0 ? int.MaxValue : limit;
			query.PageInfo = query.PageInfo ??
				new PagingInfo
				{
					PageNumber = page <= 0 ? 1 : page,
					Count = limit
				};
			query.PageInfo.PagingCookie = cookie ?? relationPagingInfo.Cookie ?? query.PageInfo.PagingCookie;

			EntityCollection records;
			var entities = new List<Entity>();

			// get all records
			do
			{
				// fetch the records
				records = service.RetrieveMultiple(query);

				// next time get the next bundle of records
				query.PageInfo.PagingCookie = records.PagingCookie;
				query.PageInfo.PageNumber++;

				// add to existing list
				entities.AddRange(records.Entities);
			} while (records.MoreRecords && entities.Count < limit && page <= 0);

			if (relationPagingInfo != null)
			{
				relationPagingInfo.Cookie = query.PageInfo.PagingCookie;
				relationPagingInfo.NextPage = query.PageInfo.PageNumber;
				relationPagingInfo.IsMoreRecords = records.MoreRecords;
			}

			return entities.ToList();
		}

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		public static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			params GeneratedEntityBase[] entities)
		{
            return ProcessDeferredQueries(service, 100, entities);
        }

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="bulkSize">The number of requests from the queue to execute in each iteration.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		internal static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			int bulkSize, params GeneratedEntityBase[] entities)
		{
			var errorList = new Dictionary<GeneratedEntityBase, IList<string>>();

			// exit if no entities to process
			if (!entities.Any()) return errorList;
            
            bulkSize = Math.Min(1000, bulkSize);

			// filter entities to only the ones with a queue
			entities = entities.Where(entity => entity.DeferredQueriesList.Any()).ToArray();

			// queue to assign errors to proper entity and to find the original query and invoke the action
			var queryActionQueue = new Queue<KeyValuePair<GeneratedEntityBase, QueryAction>>();

			// create a queue to support paging in bulk execution
			var requestsQueue = new Queue<OrganizationRequest>();

			// go over the entities and fill the queues
			foreach (var entity in entities)
			{
				foreach (var queryAction in entity.DeferredQueriesList)
				{
					queryActionQueue.Enqueue(new KeyValuePair<GeneratedEntityBase, QueryAction>(entity, queryAction));
					requestsQueue.Enqueue(new RetrieveMultipleRequest {Query = queryAction.Query});
				}
			}

			var bulkQuery = new ExecuteMultipleRequest
			{
				Settings = new ExecuteMultipleSettings
				{
					ContinueOnError = true,
					ReturnResponses = true
				},
				Requests = new OrganizationRequestCollection()
			};

			while (requestsQueue.Any())
			{
				bulkQuery.Requests.Clear();

				// page execution
				do
				{
					bulkQuery.Requests.Add(requestsQueue.Dequeue());
				} while (bulkQuery.Requests.Count % bulkSize != 0 && requestsQueue.Any());

				var result = (ExecuteMultipleResponse) service.Execute(bulkQuery);

				foreach (var response in result.Responses)
				{
					var queryAction = queryActionQueue.Dequeue();
					var entity = queryAction.Key;

					// parse fault
					if (response.Fault != null)
					{
						if (!errorList.ContainsKey(entity))
						{
							errorList.Add(entity, new List<string>());
						}

						errorList[entity].Add(string.Format("Error code: {0}.\nError message: {1}.",
							response.Fault.ErrorCode, response.Fault.Message)
													 + (!string.IsNullOrEmpty(response.Fault.TraceText)
															? "\nError trace: " + response.Fault.TraceText
															: ""));

						continue;
					}

					queryAction.Value.Action.Invoke(response.Response);
				}
			}

			return errorList;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
    public class EntityComparer : IEqualityComparer<Entity>
    {
        public bool Equals(Entity x, Entity y)
        {
            return x.Id == y.Id;
        }

        public int GetHashCode(Entity obj)
        {
            return obj.Id.GetHashCode();
        }
    }

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static class TypeHelpers
	{
		public static Type GetType(string name, Type assemblyScope = null)
		{
			return assemblyScope == null
				? AppDomain.CurrentDomain.GetAssemblies().SelectMany(a => a.GetTypes())
					.FirstOrDefault(e => e.AssemblyQualifiedName == name || e.FullName == name || e.Name == name)
				: assemblyScope.Assembly.GetTypes()
					.FirstOrDefault(e => e.AssemblyQualifiedName == name || e.FullName == name || e.Name == name);
		}
	}

	public partial class EntityContract
	{
		public TCrmEntity ConvertTo<TCrmEntity>(ClearMode? clearMode = null) where TCrmEntity : Entity
		{
			// create CRM entity object
			var crmRecord = Activator.CreateInstance<TCrmEntity>();

			var entityType = GetType();
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;

			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception($"Entity '{entityType.Name}' doesn't map to CRM entity '{typeof(TCrmEntity).Name}'.");
			}

			clearMode = clearMode
				?? (ClearMode?)entityType.GetProperty("ValueClearMode")?.GetValue(this)
					?? ClearMode.Disabled;

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>() != null;
				// get the clear flag mode value if it exists
				var isClearFlag = clearMode == ClearMode.Flag
					&& (bool?)entityType.GetProperties().Where(fieldQ => fieldQ.Name == "Clear_" + field.Name)
						.Select(fieldQ => fieldQ.GetValue(this)).FirstOrDefault() == true;
				// check 'empty' mode
				var isClearEmpty = clearMode == ClearMode.Empty;
				var isClearConvention = clearMode == ClearMode.Convention;

				var isSetValue = value != null || isClearFlag || isClearEmpty || isClearConvention;

				// skip if no value and clear mode does not match and pass check
				if (isReadOnly || !isSetValue)
				{
					continue;
				}

				SetValueInCrmRecord(value, crmRecord, field.Name, mapping, clearMode, isClearFlag);
			}

			// go over flattened relations in the contract entity that has the mapping attribute
			foreach (var field in GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || (value == null && clearMode != ClearMode.Empty) || value is Array)
				{
					continue;
				}

				SetRelationInRecord(value, field);
			}

			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				// get the value of the field
				var value = relation.GetValue(this);
				// is the relation read only
				var isReadOnly = relation.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || value == null || (value is Array && ((Array)value).Length <= 0))
				{
					continue;
				}

				SetRelationInCrmRecord(value, crmRecord, mapping, clearMode);
			}

			return crmRecord;
		}

		private void SetRelationInRecord(object value, PropertyInfo propertyInfo)
		{
			// get the property representing the relationship
			var relation = GetType().GetProperties()
				.Where(fQ => !Attribute.IsDefined(fQ, typeof(CrmFieldMappingAttribute))
					&& Attribute.IsDefined(fQ, typeof(CrmRelationMappingAttribute)))
				.FirstOrDefault(
					fQ =>
					{
						var rAttr = fQ.GetCustomAttribute<CrmRelationMappingAttribute>();
						var relationAttr = propertyInfo.GetCustomAttribute<CrmRelationMappingAttribute>();
						return rAttr.SchemaName == relationAttr.SchemaName && rAttr.Role == relationAttr.Role;
					});

			if (relation == null)
			{
				return;
			}

			// get the related entity type
			var type = relation.PropertyType;
			// get the target property in the related entity to set the value
			var mappedProperty = type.GetProperties()
				.Where(fQ => Attribute.IsDefined(fQ, typeof(CrmFieldMappingAttribute))
					&& !Attribute.IsDefined(fQ, typeof(CrmRelationMappingAttribute)))
				.FirstOrDefault(p => p.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName
					== propertyInfo.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName);

			if (mappedProperty == null)
			{
				return;
			}

			// get the relation value
			var record = relation.GetValue(this);

			if (record == null)
			{
				// create a new instance of the related entity if it's null
				record = Activator.CreateInstance(type);
				// save the relation object in this entity
				relation.SetValue(this, record);
			}

			// set the field value in the related record
			mappedProperty.SetValue(record, value);
		}

		private static void SetValueInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			string fieldName, CrmFieldMappingAttribute mapping, ClearMode? clearMode = null, bool isClearFlag = false)
			where TCrmEntity : Entity
		{
			var crmProperty = GetCrmProperty<TCrmEntity>(mapping);

			if (crmProperty == null)
			{
				return;
			}
            
			// if no value, and clear mode is global or flagged, then clear
			if (value == null && (clearMode == ClearMode.Empty || isClearFlag))
			{
				crmRecord[mapping.LogicalName] = null;
			}
            
			// convert types
			if (value is Enum)
			{
			    // if clear mode is convention, and value fits convention, then clear
				var intVal = Convert.ToInt32(value);
				crmRecord[mapping.LogicalName] =
					(intVal == -1 && clearMode == ClearMode.Convention)
						? null
						: new OptionSetValue(intVal);
			}
			else if (value is decimal && crmProperty.PropertyType == typeof(Money))
			{
				crmRecord[mapping.LogicalName] =
					(value.Equals(decimal.MinValue) && clearMode == ClearMode.Convention)
						? null
						: new Money(((decimal?)value).Value);
			}
			else if (value is Guid && fieldName != "Id" && crmProperty.PropertyType == typeof(Guid?))
			{
				crmProperty.SetValue(crmRecord,
					(value.Equals(Guid.Empty) && clearMode == ClearMode.Convention)
						? null
						: (Guid?)value);
			}
			else if (value is LookupValue)
			{
				var lookupValue = (LookupValue)value;

				if (crmProperty.PropertyType == typeof(LookupValue))
				{
					crmProperty.SetValue(crmRecord,
						(lookupValue.Id.Equals(Guid.Empty) && clearMode == ClearMode.Convention)
							? null
							: value);
				}
				else if (crmProperty.PropertyType == typeof(EntityReference))
				{
					crmProperty.SetValue(crmRecord,
						(lookupValue.Id.Equals(Guid.Empty) && clearMode == ClearMode.Convention)
							? null
							: new EntityReference(lookupValue.EntityName, lookupValue.Id));
				}
			}
			else
			{
			    // if clear mode is convention, and value fits convention, then clear
			    if (clearMode == ClearMode.Convention
                    && ((value is DateTime && value.Equals(new DateTime(1970, 1, 1)))
                        || (value is int && value.Equals(int.MinValue))
                        || (value is long && value.Equals(long.MinValue))
                        || (value is decimal && value.Equals(decimal.MinValue))
                        || (value is double && value.Equals(double.MinValue))
                        || (value is Array && (value as Array).Length <= 0)
                        || (value is string && value.Equals(""))))
			    {
				    crmProperty.SetValue(crmRecord, null);
			    }
                else
				{
                    crmProperty.SetValue(crmRecord, value);
                }
			}
		}

		/// <summary>
		///     Gets the property from the CRM entity that corresponds to this field -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmProperty<TCrmEntity>(CrmFieldMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmProperty = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var fieldAttribute = propertyQ
										.GetCustomAttributes<AttributeLogicalNameAttribute>(true)
										.FirstOrDefault();

									return fieldAttribute != null
										   && fieldAttribute.LogicalName == mapping.LogicalName;
								});

			return crmProperty;
		}

		private static void SetRelationInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			CrmRelationMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmRelation = GetCrmRelation<TCrmEntity>(mapping);

			// if relation not found, then the entities don't map correctly
			if (crmRelation == null)
			{
				throw new Exception($"Entity doesn't map to CRM entity '{typeof(TCrmEntity).Name}'.");
			}

			object convertedValue = null;

			var type = TypeHelpers.GetType(mapping.RelatedEntityName);

			if (type == null)
			{
				throw new TypeLoadException($"Could not find type {mapping.RelatedEntityName} to convert contract record.");
			}

			// x-N relation
			if (value is Array)
			{
				var relatedRecords = (Array)value;
				// create an array for the related entities of the appropriate type
				var crmRelatedRecords = Array.CreateInstance(type, relatedRecords.Length);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = GetConversionMethod(relatedRecords.GetValue(0), type);

				if (method == null)
				{
					return;
				}

				// convert all entities to CRM entities
				var objectCrmRelatedRecords =
					(from object relatedRecord in relatedRecords
					 select method.Invoke(relatedRecord, new object[] { clearMode })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectCrmRelatedRecords, crmRelatedRecords, crmRelatedRecords.Length);
				convertedValue = crmRelatedRecords;
			}
			else if (value is EntityContract)
			{
				// N-1 relation
				var method = GetConversionMethod(value, type);

				if (method == null)
				{
					return;
				}

				convertedValue = method.Invoke(value, new object[] { clearMode });
			}

			// set the related entities value in the CRM entity
			crmRelation.SetValue(crmRecord, convertedValue);
		}

		private static MethodInfo GetConversionMethod(object entity, Type relatedType)
		{
			return entity.GetType().GetMethod("ConvertTo")?.MakeGenericMethod(relatedType);
		}

		/// <summary>
		///     Gets the relation from the CRM entity that corresponds to this relation -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmRelation<TCrmEntity>(CrmRelationMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmRelation = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var relationAttribute = propertyQ
										.GetCustomAttributes<RelationshipSchemaNameAttribute>(true)
										.FirstOrDefault();

									return relationAttribute != null
										   && relationAttribute.SchemaName == mapping.SchemaName
										   && relationAttribute.PrimaryEntityRole == (EntityRole?)mapping.Role;
								});

			return crmRelation;
		}
	}

	#endregion


	#region Actions

	#endregion

	#region Known Types

	#endregion

	#region Entities

	#region CustomTrigger

	/// <summary>
	/// 'jms_customtrigger'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("jms_customtrigger")]
	public partial class CustomTrigger : GeneratedEntity<CustomTrigger.RelationName>
	{
		public CustomTrigger() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public CustomTrigger(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public CustomTrigger(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "Custom Trigger";
		public const string SchemaName = "jms_customtrigger";
		public const string EntityLogicalName = "jms_customtrigger";
		public const int EntityTypeCode = 10218;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("jms_customtriggerid")]
		public override System.Guid Id
		{
			get => (CustomTriggerId == null || CustomTriggerId == Guid.Empty) ? base.Id : CustomTriggerId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("jms_customtriggerid");
                    base.Id = value;
                } else {
				    CustomTriggerId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Id;
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Id;
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber")]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
			    return value;
			}
			set
			{
                SetAttributeValue("importsequencenumber", value);
			}
		}

        /// <summary>
        ///  
		/// 'jms_customtriggerId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("jms_customtriggerid")]
		public Guid? CustomTriggerId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("jms_customtriggerid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("jms_customtriggerid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

        /// <summary>
        /// [Required][MaxLength=100] 
		/// 'jms_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("jms_name")]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("jms_name");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_name", value);
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Id;
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Id;
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier for the organization
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Id;
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
			    return value;
			}
			set
			{
                SetAttributeValue("overriddencreatedon", value);
			}
		}

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Custom Trigger
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				return (StatusEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("statecode", value);
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Custom Trigger
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				return (StatusReasonEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("statuscode", value);
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber")]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
			    return value;
			}
			set
			{
                SetAttributeValue("timezoneruleversionnumber", value);
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode")]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
			    return value;
			}
			set
			{
                SetAttributeValue("utcconversiontimezonecode", value);
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:1, 'lk_jms_customtrigger_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_customtrigger_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get => GetRelatedEntity<User>("lk_jms_customtrigger_createdby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_jms_customtrigger_createdby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_jms_customtrigger_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_customtrigger_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get => GetRelatedEntity<User>("lk_jms_customtrigger_createdonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_jms_customtrigger_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_jms_customtrigger_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_customtrigger_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get => GetRelatedEntity<User>("lk_jms_customtrigger_modifiedby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_jms_customtrigger_modifiedby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_jms_customtrigger_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_customtrigger_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get => GetRelatedEntity<User>("lk_jms_customtrigger_modifiedonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_jms_customtrigger_modifiedonbehalfby", null, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "jms_customtrigger", "systemuserid", "createdby", "jms_customtriggerid", "jms_customtriggerid", "lk_jms_customtrigger_createdby", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "jms_customtrigger", "systemuserid", "createdonbehalfby", "jms_customtriggerid", "jms_customtriggerid", "lk_jms_customtrigger_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "jms_customtrigger", "systemuserid", "modifiedby", "jms_customtriggerid", "jms_customtriggerid", "lk_jms_customtrigger_modifiedby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "jms_customtrigger", "systemuserid", "modifiedonbehalfby", "jms_customtriggerid", "jms_customtriggerid", "lk_jms_customtrigger_modifiedonbehalfby", typeof (User) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public CustomTrigger(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["jms_customtriggerid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		public enum StatusEnum
		{
			Active = 0,
			Inactive = 1,
		}
	
		public enum StatusReasonEnum
		{
			Active = 1,
			Inactive = 2,
		}
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string CustomTriggerId = "jms_customtriggerid";
			public const string Name = "jms_name";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion
		}

		#endregion

		#endregion
	}

	#endregion

	#region Delegation

	/// <summary>
	/// 'jms_delegation'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("jms_delegation")]
	public partial class Delegation : GeneratedEntity<Delegation.RelationName>
	{
		public Delegation() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public Delegation(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public Delegation(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "Delegation";
		public const string SchemaName = "jms_delegation";
		public const string EntityLogicalName = "jms_delegation";
		public const int EntityTypeCode = 10213;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("jms_delegationid")]
		public override System.Guid Id
		{
			get => (DelegationId == null || DelegationId == Guid.Empty) ? base.Id : DelegationId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("jms_delegationid");
                    base.Id = value;
                } else {
				    DelegationId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Id;
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Id;
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=100] 
		/// 'EmailAddress'.<br />
        /// The primary email address for the entity.
        /// </summary>
		[AttributeLogicalName("emailaddress")]
		public string EmailAddress
		{
			get
			{
				var value = GetAttributeValue<string>("emailaddress");
			    return value;
			}
			set
			{
                SetAttributeValue("emailaddress", value);
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber")]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
			    return value;
			}
			set
			{
                SetAttributeValue("importsequencenumber", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'jms_AlsoNotify'.<br />
        /// A email address for additional notifications.
        /// </summary>
		[AttributeLogicalName("jms_alsonotify")]
		public string AlsoNotify
		{
			get
			{
				var value = GetAttributeValue<string>("jms_alsonotify");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_alsonotify", value);
			}
		}

		[AttributeLogicalName("jms_alsonotifyuser")]
		public Guid? AlsoNotifyUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("jms_alsonotifyuser");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("jms_alsonotifyuser", new EntityReference("systemuser", value.Value));
                else
	                SetAttributeValue("jms_alsonotifyuser", value);
			}
		}

        public string AlsoNotifyUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("jms_alsonotifyuser");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'jms_ApplyDefaultConfigurations'.<br />
        /// Auto load Delegation Reassign Configurations with type of default.
        /// </summary>
		[AttributeLogicalName("jms_applydefaultconfigurations")]
		public bool? ApplyDefaultConfigurations
		{
			get
			{
				var value = GetAttributeValue<bool?>("jms_applydefaultconfigurations");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_applydefaultconfigurations", value);
			}
		}

        /// <summary>
        /// [Required] 
		/// 'jms_Delegated'.<br />
        /// A system user who are going to be delegated.
        /// </summary>
		[AttributeLogicalName("jms_delegated")]
		public Guid? DelegatedUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("jms_delegated");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("jms_delegated", new EntityReference("systemuser", value.Value));
                else
	                SetAttributeValue("jms_delegated", value);
			}
		}

        public string DelegatedUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("jms_delegated");
                return value?.Name;
            }
        }

        /// <summary>
        /// [Required] 
		/// 'jms_Delegating'.<br />
        /// A system user who are going to delegate.
        /// </summary>
		[AttributeLogicalName("jms_delegating")]
		public Guid? DelegatingUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("jms_delegating");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("jms_delegating", new EntityReference("systemuser", value.Value));
                else
	                SetAttributeValue("jms_delegating", value);
			}
		}

        public string DelegatingUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("jms_delegating");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'jms_delegationId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("jms_delegationid")]
		public Guid? DelegationId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("jms_delegationid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("jms_delegationid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

        /// <summary>
        ///  
		/// 'jms_DelegationMode'.<br />
        /// Choose appropriate mode for delegating user to be granted with security roles.
        /// </summary>
		[AttributeLogicalName("jms_delegationmode")]
		public DelegationModeEnum? DelegationMode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("jms_delegationmode");
				return (DelegationModeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("jms_delegationmode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("jms_delegationmode", value);
			}
		}

		[AttributeLogicalName("jms_effectivedate")]
		public DateTime? EffectiveDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("jms_effectivedate");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_effectivedate", value);
			}
		}

		[AttributeLogicalName("jms_expirydate")]
		public DateTime? ExpiryDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("jms_expirydate");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_expirydate", value);
			}
		}

        /// <summary>
        ///  
		/// 'jms_IsAutoPublish'.<br />
        /// Provide administrators with options to simplify the creation process.
        /// </summary>
		[AttributeLogicalName("jms_isautopublish")]
		public bool? IsAutoPublish
		{
			get
			{
				var value = GetAttributeValue<bool?>("jms_isautopublish");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_isautopublish", value);
			}
		}

        /// <summary>
        /// [Required][MaxLength=100] 
		/// 'jms_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("jms_name")]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("jms_name");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_name", value);
			}
		}

		[AttributeLogicalName("jms_processlog")]
		public string ProcessLog
		{
			get
			{
				var value = GetAttributeValue<string>("jms_processlog");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_processlog", value);
			}
		}

        /// <summary>
        /// [MaxLength=2000] 
		/// 'jms_Roles'.<br />
        /// Delegating roles that are active from effective date to expiry date.
        /// </summary>
		[AttributeLogicalName("jms_roles")]
		public string Roles
		{
			get
			{
				var value = GetAttributeValue<string>("jms_roles");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_roles", value);
			}
		}

        /// <summary>
        ///  
		/// 'jms_SendNotifications'.<br />
        /// A switch whether or not to send notifications to creator, delegated user and delegating user. It takes YES as default.
        /// </summary>
		[AttributeLogicalName("jms_sendnotifications")]
		public bool? SendNotifications
		{
			get
			{
				var value = GetAttributeValue<bool?>("jms_sendnotifications");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_sendnotifications", value);
			}
		}

		[AttributeLogicalName("jms_teams")]
		public string Teams
		{
			get
			{
				var value = GetAttributeValue<string>("jms_teams");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_teams", value);
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Id;
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Id;
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier for the organization
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Id;
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
			    return value;
			}
			set
			{
                SetAttributeValue("overriddencreatedon", value);
			}
		}

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Delegation
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				return (StatusEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("statecode", value);
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Delegation
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				return (StatusReasonEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("statuscode", value);
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber")]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
			    return value;
			}
			set
			{
                SetAttributeValue("timezoneruleversionnumber", value);
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode")]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
			    return value;
			}
			set
			{
                SetAttributeValue("utcconversiontimezonecode", value);
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'jms_jms_delegation_jms_delegationreassignrecord_Delegation'
		/// </summary>
		[RelationshipSchemaName("jms_jms_delegation_jms_delegationreassignrecord_Delegation")]
		public DelegationReassignRecord[] DelegationReassignRecordsOfDelegation
		{
			get => GetRelatedEntities<DelegationReassignRecord>("jms_jms_delegation_jms_delegationreassignrecord_Delegation", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("jms_jms_delegation_jms_delegationreassignrecord_Delegation", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'jms_systemuser_jms_delegation_AlsoNotifyUser'
		/// </summary>
		[RelationshipSchemaName("jms_systemuser_jms_delegation_AlsoNotifyUser"), AttributeLogicalName("jms_alsonotifyuser")]
		public User UserAsAlsoNotifyUser
		{
			get => GetRelatedEntity<User>("jms_systemuser_jms_delegation_AlsoNotifyUser", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("jms_systemuser_jms_delegation_AlsoNotifyUser", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'jms_systemuser_jms_delegation_Delegated'
		/// </summary>
		[RelationshipSchemaName("jms_systemuser_jms_delegation_Delegated"), AttributeLogicalName("jms_delegated")]
		public User UserAsDelegatedUser
		{
			get => GetRelatedEntity<User>("jms_systemuser_jms_delegation_Delegated", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("jms_systemuser_jms_delegation_Delegated", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'jms_systemuser_jms_delegation_Delegating'
		/// </summary>
		[RelationshipSchemaName("jms_systemuser_jms_delegation_Delegating"), AttributeLogicalName("jms_delegating")]
		public User UserAsDelegatingUser
		{
			get => GetRelatedEntity<User>("jms_systemuser_jms_delegation_Delegating", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("jms_systemuser_jms_delegation_Delegating", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_jms_delegation_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegation_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get => GetRelatedEntity<User>("lk_jms_delegation_createdby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_jms_delegation_createdby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_jms_delegation_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegation_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get => GetRelatedEntity<User>("lk_jms_delegation_createdonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_jms_delegation_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_jms_delegation_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegation_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get => GetRelatedEntity<User>("lk_jms_delegation_modifiedby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_jms_delegation_modifiedby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_jms_delegation_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegation_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get => GetRelatedEntity<User>("lk_jms_delegation_modifiedonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_jms_delegation_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:N, 'jms_jms_delegationreassignconfiguration_jms_d'
		/// </summary>
		[RelationshipSchemaName("jms_jms_delegationreassignconfiguration_jms_d")]
		public DelegationReassignConfiguration[] DelegationReassignConfigurationsOfjms_jms_delegationreassignconfiguration_jms_d

		{
			get => GetRelatedEntities<DelegationReassignConfiguration>("jms_jms_delegationreassignconfiguration_jms_d", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("jms_jms_delegationreassignconfiguration_jms_d", null, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName DelegationReassignRecordsOfDelegation = new RelationName("DelegationReassignRecordsOfDelegation");
			public static RelationName UserAsAlsoNotifyUser = new RelationName("UserAsAlsoNotifyUser");
			public static RelationName UserAsDelegatedUser = new RelationName("UserAsDelegatedUser");
			public static RelationName UserAsDelegatingUser = new RelationName("UserAsDelegatingUser");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName DelegationReassignConfigurationsOfjms_jms_delegationreassignconfiguration_jms_d = new RelationName("DelegationReassignConfigurationsOfjms_jms_delegationreassignconfiguration_jms_d");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["DelegationReassignRecordsOfDelegation"] = new object[] { "DelegationReassignRecordsOfDelegation", "jms_delegationreassignrecord", "jms_delegation", "jms_delegation", "jms_delegationid", "jms_delegationid", "jms_delegationid", "jms_jms_delegation_jms_delegationreassignrecord_Delegation", typeof (DelegationReassignRecord[]) };
			relationProperties["UserAsAlsoNotifyUser"] = new object[] { "UserAsAlsoNotifyUser", "systemuser", "jms_delegation", "systemuserid", "jms_alsonotifyuser", "jms_delegationid", "jms_delegationid", "jms_systemuser_jms_delegation_AlsoNotifyUser", typeof (User) };
			relationProperties["UserAsDelegatedUser"] = new object[] { "UserAsDelegatedUser", "systemuser", "jms_delegation", "systemuserid", "jms_delegated", "jms_delegationid", "jms_delegationid", "jms_systemuser_jms_delegation_Delegated", typeof (User) };
			relationProperties["UserAsDelegatingUser"] = new object[] { "UserAsDelegatingUser", "systemuser", "jms_delegation", "systemuserid", "jms_delegating", "jms_delegationid", "jms_delegationid", "jms_systemuser_jms_delegation_Delegating", typeof (User) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "jms_delegation", "systemuserid", "createdby", "jms_delegationid", "jms_delegationid", "lk_jms_delegation_createdby", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "jms_delegation", "systemuserid", "createdonbehalfby", "jms_delegationid", "jms_delegationid", "lk_jms_delegation_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "jms_delegation", "systemuserid", "modifiedby", "jms_delegationid", "jms_delegationid", "lk_jms_delegation_modifiedby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "jms_delegation", "systemuserid", "modifiedonbehalfby", "jms_delegationid", "jms_delegationid", "lk_jms_delegation_modifiedonbehalfby", typeof (User) };
			relationProperties["DelegationReassignConfigurationsOfjms_jms_delegationreassignconfiguration_jms_d"] = new object[] { "DelegationReassignConfigurationsOfjms_jms_delegationreassignconfiguration_jms_d", "jms_delegationreassignconfiguration", "jms_jms_delegationreassignconfiguration_jms", "jms_delegationreassignconfigurationid", "jms_delegationreassignconfigurationid", "jms_delegationid", "jms_delegationid", "jms_jms_delegationreassignconfiguration_jms_d", typeof (DelegationReassignConfiguration[]) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public Delegation(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["jms_delegationid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		public enum ApplyDefaultConfigurationsEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum DelegationModeEnum
		{
			Teambased = 952700000,
			Rolebased = 952700001,
		}
	
		public enum IsAutoPublishEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum SendNotificationsEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum StatusEnum
		{
			Active = 0,
			Inactive = 1,
		}
	
		public enum StatusReasonEnum
		{
			Draft = 1,
			Published = 952700000,
			Pending = 952700001,
			Delegating = 952700002,
			Canceled = 2,
			Expired = 952700003,
		}
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string EmailAddress = "emailaddress";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string AlsoNotify = "jms_alsonotify";
			public const string AlsoNotifyUser = "jms_alsonotifyuser";
			public const string ApplyDefaultConfigurations = "jms_applydefaultconfigurations";
			public const string DelegatedUser = "jms_delegated";
			public const string DelegatingUser = "jms_delegating";
			public const string DelegationId = "jms_delegationid";
			public const string DelegationMode = "jms_delegationmode";
			public const string EffectiveDate = "jms_effectivedate";
			public const string ExpiryDate = "jms_expirydate";
			public const string IsAutoPublish = "jms_isautopublish";
			public const string Name = "jms_name";
			public const string ProcessLog = "jms_processlog";
			public const string Roles = "jms_roles";
			public const string SendNotifications = "jms_sendnotifications";
			public const string Teams = "jms_teams";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion
		}

		#endregion

		#endregion
	}

	#endregion

	#region DelegationReassignConfiguration

	/// <summary>
	/// 'jms_delegationreassignconfiguration'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("jms_delegationreassignconfiguration")]
	public partial class DelegationReassignConfiguration : GeneratedEntity<DelegationReassignConfiguration.RelationName>
	{
		public DelegationReassignConfiguration() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public DelegationReassignConfiguration(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public DelegationReassignConfiguration(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "Delegation Reassign Configuration";
		public const string SchemaName = "jms_delegationreassignconfiguration";
		public const string EntityLogicalName = "jms_delegationreassignconfiguration";
		public const int EntityTypeCode = 10214;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("jms_delegationreassignconfigurationid")]
		public override System.Guid Id
		{
			get => (DelegationReassignConfigurationId == null || DelegationReassignConfigurationId == Guid.Empty) ? base.Id : DelegationReassignConfigurationId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("jms_delegationreassignconfigurationid");
                    base.Id = value;
                } else {
				    DelegationReassignConfigurationId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Id;
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Id;
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber")]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
			    return value;
			}
			set
			{
                SetAttributeValue("importsequencenumber", value);
			}
		}

        /// <summary>
        ///  
		/// 'jms_delegationreassignconfigurationId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("jms_delegationreassignconfigurationid")]
		public Guid? DelegationReassignConfigurationId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("jms_delegationreassignconfigurationid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("jms_delegationreassignconfigurationid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

		[AttributeLogicalName("jms_entityname")]
		public string EntityName
		{
			get
			{
				var value = GetAttributeValue<string>("jms_entityname");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_entityname", value);
			}
		}

        /// <summary>
        /// [MaxLength=10000] 
		/// 'jms_Filter'.<br />
        /// FetchXml filter
        /// </summary>
		[AttributeLogicalName("jms_filter")]
		public string Filter
		{
			get
			{
				var value = GetAttributeValue<string>("jms_filter");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_filter", value);
			}
		}

		[AttributeLogicalName("jms_isdefault")]
		public bool? IsDefault
		{
			get
			{
				var value = GetAttributeValue<bool?>("jms_isdefault");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_isdefault", value);
			}
		}

        /// <summary>
        /// [Required][MaxLength=100] 
		/// 'jms_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("jms_name")]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("jms_name");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_name", value);
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Id;
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Id;
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier for the organization
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Id;
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
			    return value;
			}
			set
			{
                SetAttributeValue("overriddencreatedon", value);
			}
		}

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Delegation Reassign Configuration
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				return (StatusEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("statecode", value);
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Delegation Reassign Configuration
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				return (StatusReasonEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("statuscode", value);
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber")]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
			    return value;
			}
			set
			{
                SetAttributeValue("timezoneruleversionnumber", value);
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode")]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
			    return value;
			}
			set
			{
                SetAttributeValue("utcconversiontimezonecode", value);
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:1, 'lk_jms_delegationreassignconfiguration_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegationreassignconfiguration_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get => GetRelatedEntity<User>("lk_jms_delegationreassignconfiguration_createdby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_jms_delegationreassignconfiguration_createdby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_jms_delegationreassignconfiguration_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegationreassignconfiguration_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get => GetRelatedEntity<User>("lk_jms_delegationreassignconfiguration_createdonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_jms_delegationreassignconfiguration_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_jms_delegationreassignconfiguration_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegationreassignconfiguration_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get => GetRelatedEntity<User>("lk_jms_delegationreassignconfiguration_modifiedby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_jms_delegationreassignconfiguration_modifiedby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_jms_delegationreassignconfiguration_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegationreassignconfiguration_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get => GetRelatedEntity<User>("lk_jms_delegationreassignconfiguration_modifiedonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_jms_delegationreassignconfiguration_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:N, 'jms_jms_delegationreassignconfiguration_jms_d'
		/// </summary>
		[RelationshipSchemaName("jms_jms_delegationreassignconfiguration_jms_d")]
		public Delegation[] DelegationsOfjms_jms_delegationreassignconfiguration_jms_d

		{
			get => GetRelatedEntities<Delegation>("jms_jms_delegationreassignconfiguration_jms_d", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("jms_jms_delegationreassignconfiguration_jms_d", null, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName DelegationsOfjms_jms_delegationreassignconfiguration_jms_d = new RelationName("DelegationsOfjms_jms_delegationreassignconfiguration_jms_d");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "jms_delegationreassignconfiguration", "systemuserid", "createdby", "jms_delegationreassignconfigurationid", "jms_delegationreassignconfigurationid", "lk_jms_delegationreassignconfiguration_createdby", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "jms_delegationreassignconfiguration", "systemuserid", "createdonbehalfby", "jms_delegationreassignconfigurationid", "jms_delegationreassignconfigurationid", "lk_jms_delegationreassignconfiguration_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "jms_delegationreassignconfiguration", "systemuserid", "modifiedby", "jms_delegationreassignconfigurationid", "jms_delegationreassignconfigurationid", "lk_jms_delegationreassignconfiguration_modifiedby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "jms_delegationreassignconfiguration", "systemuserid", "modifiedonbehalfby", "jms_delegationreassignconfigurationid", "jms_delegationreassignconfigurationid", "lk_jms_delegationreassignconfiguration_modifiedonbehalfby", typeof (User) };
			relationProperties["DelegationsOfjms_jms_delegationreassignconfiguration_jms_d"] = new object[] { "DelegationsOfjms_jms_delegationreassignconfiguration_jms_d", "jms_delegation", "jms_jms_delegationreassignconfiguration_jms", "jms_delegationid", "jms_delegationid", "jms_delegationreassignconfigurationid", "jms_delegationreassignconfigurationid", "jms_jms_delegationreassignconfiguration_jms_d", typeof (Delegation[]) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public DelegationReassignConfiguration(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["jms_delegationreassignconfigurationid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		public enum IsDefaultEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum StatusEnum
		{
			Active = 0,
			Inactive = 1,
		}
	
		public enum StatusReasonEnum
		{
			Active = 1,
			Inactive = 2,
		}
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string DelegationReassignConfigurationId = "jms_delegationreassignconfigurationid";
			public const string EntityName = "jms_entityname";
			public const string Filter = "jms_filter";
			public const string IsDefault = "jms_isdefault";
			public const string Name = "jms_name";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion
		}

		#endregion

		#endregion
	}

	#endregion

	#region DelegationReassignRecord

	/// <summary>
	/// 'jms_delegationreassignrecord'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("jms_delegationreassignrecord")]
	public partial class DelegationReassignRecord : GeneratedEntity<DelegationReassignRecord.RelationName>
	{
		public DelegationReassignRecord() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public DelegationReassignRecord(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public DelegationReassignRecord(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "Delegation Reassign Record";
		public const string SchemaName = "jms_delegationreassignrecord";
		public const string EntityLogicalName = "jms_delegationreassignrecord";
		public const int EntityTypeCode = 10216;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Alternate Keys

		public void AddDelegationKey(EntityReference value) { KeyAttributes.Add("jms_delegation", value); }
		public void AddGuidKey(string value) { KeyAttributes.Add("jms_guid", value); }

		#endregion

		#region Attributes

		[AttributeLogicalName("jms_delegationreassignrecordid")]
		public override System.Guid Id
		{
			get => (DelegationReassignRecordId == null || DelegationReassignRecordId == System.Guid.Empty) ? base.Id : DelegationReassignRecordId.GetValueOrDefault();
			set
			{
                if (value == System.Guid.Empty) {
                    Attributes.Remove("jms_delegationreassignrecordid");
                    base.Id = value;
                } else {
				    DelegationReassignRecordId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Id;
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Id;
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber")]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
			    return value;
			}
			set
			{
                SetAttributeValue("importsequencenumber", value);
			}
		}

		[AttributeLogicalName("jms_delegation")]
		public Guid? Delegation
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("jms_delegation");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("jms_delegation", new EntityReference("jms_delegation", value.Value));
                else
	                SetAttributeValue("jms_delegation", value);
			}
		}

        public string DelegationName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("jms_delegation");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'jms_delegationreassignrecordId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("jms_delegationreassignrecordid")]
		public Guid? DelegationReassignRecordId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("jms_delegationreassignrecordid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("jms_delegationreassignrecordid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

		[AttributeLogicalName("jms_entityname")]
		public string EntityName
		{
			get
			{
				var value = GetAttributeValue<string>("jms_entityname");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_entityname", value);
			}
		}

		[AttributeLogicalName("jms_guid")]
		public string Guid
		{
			get
			{
				var value = GetAttributeValue<string>("jms_guid");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_guid", value);
			}
		}

        /// <summary>
        /// [Required][MaxLength=100] 
		/// 'jms_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("jms_name")]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("jms_name");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_name", value);
			}
		}

		[AttributeLogicalName("jms_recordlink")]
		public string RecordLink
		{
			get
			{
				var value = GetAttributeValue<string>("jms_recordlink");
			    return value;
			}
			set
			{
                SetAttributeValue("jms_recordlink", value);
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Id;
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Id;
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier for the organization
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Id;
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
			    return value;
			}
			set
			{
                SetAttributeValue("overriddencreatedon", value);
			}
		}

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Delegation Reassign Record
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				return (StatusEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("statecode", value);
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Delegation Reassign Record
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				return (StatusReasonEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("statuscode", value);
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber")]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
			    return value;
			}
			set
			{
                SetAttributeValue("timezoneruleversionnumber", value);
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode")]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
			    return value;
			}
			set
			{
                SetAttributeValue("utcconversiontimezonecode", value);
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:1, 'jms_jms_delegation_jms_delegationreassignrecord_Delegation'
		/// </summary>
		[RelationshipSchemaName("jms_jms_delegation_jms_delegationreassignrecord_Delegation"), AttributeLogicalName("jms_delegation")]
		public Delegation DelegationAsDelegation
		{
			get => GetRelatedEntity<Delegation>("jms_jms_delegation_jms_delegationreassignrecord_Delegation", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Delegation>("jms_jms_delegation_jms_delegationreassignrecord_Delegation", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_jms_delegationreassignrecord_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegationreassignrecord_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get => GetRelatedEntity<User>("lk_jms_delegationreassignrecord_createdby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_jms_delegationreassignrecord_createdby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_jms_delegationreassignrecord_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegationreassignrecord_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get => GetRelatedEntity<User>("lk_jms_delegationreassignrecord_createdonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_jms_delegationreassignrecord_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_jms_delegationreassignrecord_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegationreassignrecord_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get => GetRelatedEntity<User>("lk_jms_delegationreassignrecord_modifiedby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_jms_delegationreassignrecord_modifiedby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_jms_delegationreassignrecord_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegationreassignrecord_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get => GetRelatedEntity<User>("lk_jms_delegationreassignrecord_modifiedonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_jms_delegationreassignrecord_modifiedonbehalfby", null, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName DelegationAsDelegation = new RelationName("DelegationAsDelegation");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["DelegationAsDelegation"] = new object[] { "DelegationAsDelegation", "jms_delegation", "jms_delegationreassignrecord", "jms_delegationid", "jms_delegation", "jms_delegationreassignrecordid", "jms_delegationreassignrecordid", "jms_jms_delegation_jms_delegationreassignrecord_Delegation", typeof (Delegation) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "jms_delegationreassignrecord", "systemuserid", "createdby", "jms_delegationreassignrecordid", "jms_delegationreassignrecordid", "lk_jms_delegationreassignrecord_createdby", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "jms_delegationreassignrecord", "systemuserid", "createdonbehalfby", "jms_delegationreassignrecordid", "jms_delegationreassignrecordid", "lk_jms_delegationreassignrecord_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "jms_delegationreassignrecord", "systemuserid", "modifiedby", "jms_delegationreassignrecordid", "jms_delegationreassignrecordid", "lk_jms_delegationreassignrecord_modifiedby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "jms_delegationreassignrecord", "systemuserid", "modifiedonbehalfby", "jms_delegationreassignrecordid", "jms_delegationreassignrecordid", "lk_jms_delegationreassignrecord_modifiedonbehalfby", typeof (User) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public DelegationReassignRecord(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["jms_delegationreassignrecordid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		public enum StatusEnum
		{
			Active = 0,
			Inactive = 1,
		}
	
		public enum StatusReasonEnum
		{
			Active = 1,
			Inactive = 2,
		}
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string Delegation = "jms_delegation";
			public const string DelegationReassignRecordId = "jms_delegationreassignrecordid";
			public const string EntityName = "jms_entityname";
			public const string Guid = "jms_guid";
			public const string Name = "jms_name";
			public const string RecordLink = "jms_recordlink";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion
		}

		#endregion

		#endregion
	}

	#endregion

	#region jms_jms_delegationreassignconfiguration_jms

	/// <summary>
	/// 'jms_jms_delegationreassignconfiguration_jms'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("jms_jms_delegationreassignconfiguration_jms")]
	public partial class jms_jms_delegationreassignconfiguration_jms : GeneratedEntity<jms_jms_delegationreassignconfiguration_jms.RelationName>
	{
		public jms_jms_delegationreassignconfiguration_jms() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public jms_jms_delegationreassignconfiguration_jms(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public jms_jms_delegationreassignconfiguration_jms(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = null;
		public const string SchemaName = "jms_jms_delegationreassignconfiguration_jms";
		public const string EntityLogicalName = "jms_jms_delegationreassignconfiguration_jms";
		public const int EntityTypeCode = 10217;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("jms_jms_delegationreassignconfiguration_jmsid")]
		public override System.Guid Id
		{
			get => (jms_jms_delegationreassignconfiguration_jmsIdId == null || jms_jms_delegationreassignconfiguration_jmsIdId == Guid.Empty) ? base.Id : jms_jms_delegationreassignconfiguration_jmsIdId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("jms_jms_delegationreassignconfiguration_jmsid");
                    base.Id = value;
                } else {
				    jms_jms_delegationreassignconfiguration_jmsIdId = value;
                }
			}
		}

		[AttributeLogicalName("jms_delegationid")]
		public Guid? jms_delegationid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("jms_delegationid");
			    return value;
			}
		}

		[AttributeLogicalName("jms_delegationreassignconfigurationid")]
		public Guid? jms_delegationreassignconfigurationid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("jms_delegationreassignconfigurationid");
			    return value;
			}
		}

		[AttributeLogicalName("jms_jms_delegationreassignconfiguration_jmsid")]
		public Guid? jms_jms_delegationreassignconfiguration_jmsIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("jms_jms_delegationreassignconfiguration_jmsid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("jms_jms_delegationreassignconfiguration_jmsid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:N, 'jms_jms_delegationreassignconfiguration_jms_d'
		/// </summary>
		[RelationshipSchemaName("jms_jms_delegationreassignconfiguration_jms_d")]
		public DelegationReassignConfiguration[] DelegationReassignConfigurationsOfjms_jms_delegationreassignconfiguration_jms_d

		{
			get => GetRelatedEntities<DelegationReassignConfiguration>("jms_jms_delegationreassignconfiguration_jms_d", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("jms_jms_delegationreassignconfiguration_jms_d", null, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName DelegationReassignConfigurationsOfjms_jms_delegationreassignconfiguration_jms_d = new RelationName("DelegationReassignConfigurationsOfjms_jms_delegationreassignconfiguration_jms_d");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["DelegationReassignConfigurationsOfjms_jms_delegationreassignconfiguration_jms_d"] = new object[] { "DelegationReassignConfigurationsOfjms_jms_delegationreassignconfiguration_jms_d", "jms_delegationreassignconfiguration", "jms_jms_delegationreassignconfiguration_jms", "jms_delegationreassignconfigurationid", "jms_delegationreassignconfigurationid", "jms_jms_delegationreassignconfiguration_jmsid", "jms_delegationid", "jms_jms_delegationreassignconfiguration_jms_d", typeof (DelegationReassignConfiguration[]) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public jms_jms_delegationreassignconfiguration_jms(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string jms_delegationid = "jms_delegationid";
			public const string jms_delegationreassignconfigurationid = "jms_delegationreassignconfigurationid";
			public const string jms_jms_delegationreassignconfiguration_jmsIdId = "jms_jms_delegationreassignconfiguration_jmsid";
			public const string VersionNumber = "versionnumber";

			#endregion
		}

		#endregion

		#endregion
	}

	#endregion

	#region SecurityRole

	/// <summary>
	/// 'Role'.<br />
	/// Grouping of security privileges. Users are assigned roles that authorize their access to the Microsoft CRM system.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("role")]
	public partial class SecurityRole : GeneratedEntity<SecurityRole.RelationName>
	{
		public SecurityRole() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public SecurityRole(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public SecurityRole(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "Security Role";
		public const string SchemaName = "Role";
		public const string EntityLogicalName = "role";
		public const int EntityTypeCode = 1036;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("roleid")]
		public override System.Guid Id
		{
			get => (RoleId == null || RoleId == Guid.Empty) ? base.Id : RoleId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("roleid");
                    base.Id = value;
                } else {
				    RoleId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'BusinessUnitId'.<br />
        /// Unique identifier of the business unit with which the role is associated.
        /// </summary>
		[AttributeLogicalName("businessunitid")]
		public Guid? BusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("businessunitid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("businessunitid", new EntityReference("businessunit", value.Value));
                else
	                SetAttributeValue("businessunitid", value);
			}
		}

        public string BusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("businessunitid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CanBeDeleted'.<br />
        /// Tells whether the role can be deleted.
        /// </summary>
		[AttributeLogicalName("canbedeleted")]
		public BooleanManagedProperty CanBeDeleted
		{
			get
			{
				var value = GetAttributeValue<BooleanManagedProperty>("canbedeleted");
			    return value;
			}
			set
			{
                SetAttributeValue("canbedeleted", value);
			}
		}

        /// <summary>
        ///  
		/// 'ComponentState'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("componentstate")]
		public GlobalEnums.ComponentState? ComponentState
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("componentstate");
				return (GlobalEnums.ComponentState?)value?.Value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the role.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Id;
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the role was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the role.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByImpersonator
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Id;
			}
		}

        public string CreatedByImpersonatorName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Unique identifier of the data import or data migration that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber")]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
			    return value;
			}
			set
			{
                SetAttributeValue("importsequencenumber", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsCustomizable'.<br />
        /// Information that specifies whether this component can be customized.
        /// </summary>
		[AttributeLogicalName("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				var value = GetAttributeValue<BooleanManagedProperty>("iscustomizable");
			    return value;
			}
			set
			{
                SetAttributeValue("iscustomizable", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsInherited'.<br />
        /// Role is inherited by users from team membership, if role associated with team.
        /// </summary>
		[AttributeLogicalName("isinherited")]
		public GlobalEnums.IsInherited? IsInherited
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("isinherited");
				return (GlobalEnums.IsInherited?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("isinherited", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("isinherited", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsManaged'.<br />
        /// Indicates whether the solution component is part of a managed solution.
        /// </summary>
		[AttributeLogicalName("ismanaged")]
		public bool? State
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismanaged");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the role.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Id;
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the role was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the role.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Id;
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=100] 
		/// 'Name'.<br />
        /// Name of the role.
        /// </summary>
		[AttributeLogicalName("name")]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("name");
			    return value;
			}
			set
			{
                SetAttributeValue("name", value);
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization associated with the role.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? Organization
		{
			get
			{
				var value = GetAttributeValue<Guid?>("organizationid");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
			    return value;
			}
			set
			{
                SetAttributeValue("overriddencreatedon", value);
			}
		}

        /// <summary>
        ///  
		/// 'OverwriteTime'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("overwritetime")]
		public DateTime? RecordOverwriteTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overwritetime");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ParentRoleId'.<br />
        /// Unique identifier of the parent role.
        /// </summary>
		[AttributeLogicalName("parentroleid")]
		public Guid? ParentRole
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("parentroleid");
                return value?.Id;
			}
		}

        public string ParentRoleName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("parentroleid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ParentRootRoleId'.<br />
        /// Unique identifier of the parent root role.
        /// </summary>
		[AttributeLogicalName("parentrootroleid")]
		public Guid? ParentRootRole
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("parentrootroleid");
                return value?.Id;
			}
		}

        public string ParentRootRoleName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("parentrootroleid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'RoleId'.<br />
        /// Unique identifier of the role.
        /// </summary>
		[AttributeLogicalName("roleid")]
		public Guid? RoleId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("roleid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("roleid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

        /// <summary>
        ///  
		/// 'RoleIdUnique'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("roleidunique")]
		public Guid? UniqueId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("roleidunique");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'RoleTemplateId'.<br />
        /// Unique identifier of the role template that is associated with the role.
        /// </summary>
		[AttributeLogicalName("roletemplateid")]
		public Guid? RoleTemplate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("roletemplateid");
                return value?.Id;
			}
		}

        public string RoleTemplateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("roletemplateid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'SolutionId'.<br />
        /// Unique identifier of the associated solution.
        /// </summary>
		[AttributeLogicalName("solutionid")]
		public Guid? Solution_SolutionId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("solutionid");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version number of the role.
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? Versionnumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'role_parent_role'
		/// </summary>
		[RelationshipSchemaName("role_parent_role", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public SecurityRole[] SecurityRolesOfParentRole
		{
			get => GetRelatedEntities<SecurityRole>("role_parent_role", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("role_parent_role", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'role_parent_root_role'
		/// </summary>
		[RelationshipSchemaName("role_parent_root_role", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public SecurityRole[] SecurityRolesOfParentRootRole
		{
			get => GetRelatedEntities<SecurityRole>("role_parent_root_role", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("role_parent_root_role", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_role_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_role_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByImpersonator
		{
			get => GetRelatedEntity<User>("lk_role_createdonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_role_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_role_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_role_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get => GetRelatedEntity<User>("lk_role_modifiedonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_role_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_rolebase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_rolebase_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get => GetRelatedEntity<User>("lk_rolebase_createdby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_rolebase_createdby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_rolebase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_rolebase_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get => GetRelatedEntity<User>("lk_rolebase_modifiedby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_rolebase_modifiedby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'role_parent_role'
		/// </summary>
		[RelationshipSchemaName("role_parent_role", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("parentroleid")]
		public SecurityRole SecurityRoleAsParentRole
		{
			get => GetRelatedEntity<SecurityRole>("role_parent_role", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<SecurityRole>("role_parent_role", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		/// <summary>
		/// N:1, 'role_parent_root_role'
		/// </summary>
		[RelationshipSchemaName("role_parent_root_role", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("parentrootroleid")]
		public SecurityRole SecurityRoleAsParentRootRole
		{
			get => GetRelatedEntity<SecurityRole>("role_parent_root_role", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<SecurityRole>("role_parent_root_role", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		/// <summary>
		/// N:N, 'systemuserroles_association'
		/// </summary>
		[RelationshipSchemaName("systemuserroles_association")]
		public User[] UsersOfsystemuserroles_association

		{
			get => GetRelatedEntities<User>("systemuserroles_association", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("systemuserroles_association", null, value);
			}
		}
		
		/// <summary>
		/// N:N, 'teamroles_association'
		/// </summary>
		[RelationshipSchemaName("teamroles_association")]
		public Team[] TeamsOfteamroles_association

		{
			get => GetRelatedEntities<Team>("teamroles_association", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("teamroles_association", null, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName SecurityRolesOfParentRole = new RelationName("SecurityRolesOfParentRole");
			public static RelationName SecurityRolesOfParentRootRole = new RelationName("SecurityRolesOfParentRootRole");
			public static RelationName UserAsCreatedByImpersonator = new RelationName("UserAsCreatedByImpersonator");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName SecurityRoleAsParentRole = new RelationName("SecurityRoleAsParentRole");
			public static RelationName SecurityRoleAsParentRootRole = new RelationName("SecurityRoleAsParentRootRole");
			public static RelationName UsersOfsystemuserroles_association = new RelationName("UsersOfsystemuserroles_association");
			public static RelationName TeamsOfteamroles_association = new RelationName("TeamsOfteamroles_association");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["SecurityRolesOfParentRole"] = new object[] { "SecurityRolesOfParentRole", "role", "role", "parentroleid", "roleid", "roleid", "roleid", "role_parent_role", typeof (SecurityRole[]) };
			relationProperties["SecurityRolesOfParentRootRole"] = new object[] { "SecurityRolesOfParentRootRole", "role", "role", "parentrootroleid", "roleid", "roleid", "roleid", "role_parent_root_role", typeof (SecurityRole[]) };
			relationProperties["UserAsCreatedByImpersonator"] = new object[] { "UserAsCreatedByImpersonator", "systemuser", "role", "systemuserid", "createdonbehalfby", "roleid", "roleid", "lk_role_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "role", "systemuserid", "modifiedonbehalfby", "roleid", "roleid", "lk_role_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "role", "systemuserid", "createdby", "roleid", "roleid", "lk_rolebase_createdby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "role", "systemuserid", "modifiedby", "roleid", "roleid", "lk_rolebase_modifiedby", typeof (User) };
			relationProperties["SecurityRoleAsParentRole"] = new object[] { "SecurityRoleAsParentRole", "role", "role", "roleid", "parentroleid", "roleid", "roleid", "role_parent_role", typeof (SecurityRole) };
			relationProperties["SecurityRoleAsParentRootRole"] = new object[] { "SecurityRoleAsParentRootRole", "role", "role", "roleid", "parentrootroleid", "roleid", "roleid", "role_parent_root_role", typeof (SecurityRole) };
			relationProperties["UsersOfsystemuserroles_association"] = new object[] { "UsersOfsystemuserroles_association", "systemuser", "systemuserroles", "systemuserid", "systemuserid", "roleid", "roleid", "systemuserroles_association", typeof (User[]) };
			relationProperties["TeamsOfteamroles_association"] = new object[] { "TeamsOfteamroles_association", "team", "teamroles", "teamid", "teamid", "roleid", "roleid", "teamroles_association", typeof (Team[]) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public SecurityRole(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["roleid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		public enum StateEnum
		{
			Managed = 1,
			Unmanaged = 0,
		}
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string BusinessUnit = "businessunitid";
			public const string CanBeDeleted = "canbedeleted";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByImpersonator = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string Customizable = "iscustomizable";
			public const string IsInherited = "isinherited";
			public const string State = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string Name = "name";
			public const string Organization = "organizationid";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string RecordOverwriteTime = "overwritetime";
			public const string ParentRole = "parentroleid";
			public const string ParentRootRole = "parentrootroleid";
			public const string RoleId = "roleid";
			public const string UniqueId = "roleidunique";
			public const string RoleTemplate = "roletemplateid";
			public const string Solution_SolutionId = "solutionid";
			public const string Versionnumber = "versionnumber";

			#endregion
		}

		#endregion

		#endregion
	}

	#endregion

	#region User

	/// <summary>
	/// 'SystemUser'.<br />
	/// Person with access to the Microsoft CRM system and who owns objects in the Microsoft CRM database.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("systemuser")]
	public partial class User : GeneratedEntity<User.RelationName>
	{
		public User() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public User(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public User(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "User";
		public const string SchemaName = "SystemUser";
		public const string EntityLogicalName = "systemuser";
		public const int EntityTypeCode = 8;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Alternate Keys

		public void AddUserIDKey(string value) { KeyAttributes.Add("cra_usr_id", value); }

		#endregion

		#region Attributes

		[AttributeLogicalName("systemuserid")]
		public override System.Guid Id
		{
			get => (UserId == null || UserId == Guid.Empty) ? base.Id : UserId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("systemuserid");
                    base.Id = value;
                } else {
				    UserId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AccessMode'.<br />
        /// Type of user.
        /// </summary>
		[AttributeLogicalName("accessmode")]
		public AccessModeEnum? AccessMode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("accessmode");
				return (AccessModeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("accessmode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("accessmode", value);
			}
		}

        /// <summary>
        ///  
		/// 'Address1_AddressId'.<br />
        /// Unique identifier for address 1.
        /// </summary>
		[AttributeLogicalName("address1_addressid")]
		public Guid? Address1ID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("address1_addressid");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_addressid", value);
			}
		}

        /// <summary>
        ///  
		/// 'Address1_AddressTypeCode'.<br />
        /// Type of address for address 1, such as billing, shipping, or primary address.
        /// </summary>
		[AttributeLogicalName("address1_addresstypecode")]
		public Address1AddressTypeEnum? Address1AddressType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address1_addresstypecode");
				return (Address1AddressTypeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("address1_addresstypecode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("address1_addresstypecode", value);
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Address1_City'.<br />
        /// City name for address 1.
        /// </summary>
		[AttributeLogicalName("address1_city")]
		public string City
		{
			get
			{
				var value = GetAttributeValue<string>("address1_city");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_city", value);
			}
		}

        /// <summary>
        /// [MaxLength=1000] 
		/// 'Address1_Composite'.<br />
        /// Shows the complete primary address.
        /// </summary>
		[AttributeLogicalName("address1_composite")]
		public string Address
		{
			get
			{
				var value = GetAttributeValue<string>("address1_composite");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Address1_Country'.<br />
        /// Country/region name in address 1.
        /// </summary>
		[AttributeLogicalName("address1_country")]
		public string CountryRegion
		{
			get
			{
				var value = GetAttributeValue<string>("address1_country");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_country", value);
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Address1_County'.<br />
        /// County name for address 1.
        /// </summary>
		[AttributeLogicalName("address1_county")]
		public string Address1County
		{
			get
			{
				var value = GetAttributeValue<string>("address1_county");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_county", value);
			}
		}

        /// <summary>
        /// [MaxLength=64] 
		/// 'Address1_Fax'.<br />
        /// Fax number for address 1.
        /// </summary>
		[AttributeLogicalName("address1_fax")]
		public string Address1Fax
		{
			get
			{
				var value = GetAttributeValue<string>("address1_fax");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_fax", value);
			}
		}

        /// <summary>
        /// [Range(-90, 90)] 
		/// 'Address1_Latitude'.<br />
        /// Latitude for address 1.
        /// </summary>
		[AttributeLogicalName("address1_latitude")]
		public double? Address1Latitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address1_latitude");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_latitude", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'Address1_Line1'.<br />
        /// First line for entering address 1 information.
        /// </summary>
		[AttributeLogicalName("address1_line1")]
		public string Street1
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line1");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_line1", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'Address1_Line2'.<br />
        /// Second line for entering address 1 information.
        /// </summary>
		[AttributeLogicalName("address1_line2")]
		public string Street2
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line2");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_line2", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'Address1_Line3'.<br />
        /// Third line for entering address 1 information.
        /// </summary>
		[AttributeLogicalName("address1_line3")]
		public string Street3
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line3");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_line3", value);
			}
		}

        /// <summary>
        /// [Range(-180, 180)] 
		/// 'Address1_Longitude'.<br />
        /// Longitude for address 1.
        /// </summary>
		[AttributeLogicalName("address1_longitude")]
		public double? Address1Longitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address1_longitude");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_longitude", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'Address1_Name'.<br />
        /// Name to enter for address 1.
        /// </summary>
		[AttributeLogicalName("address1_name")]
		public string Address1Name
		{
			get
			{
				var value = GetAttributeValue<string>("address1_name");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_name", value);
			}
		}

        /// <summary>
        /// [MaxLength=40] 
		/// 'Address1_PostalCode'.<br />
        /// ZIP Code or postal code for address 1.
        /// </summary>
		[AttributeLogicalName("address1_postalcode")]
		public string ZIPPostalCode
		{
			get
			{
				var value = GetAttributeValue<string>("address1_postalcode");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_postalcode", value);
			}
		}

        /// <summary>
        /// [MaxLength=40] 
		/// 'Address1_PostOfficeBox'.<br />
        /// Post office box number for address 1.
        /// </summary>
		[AttributeLogicalName("address1_postofficebox")]
		public string Address1PostOfficeBox
		{
			get
			{
				var value = GetAttributeValue<string>("address1_postofficebox");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_postofficebox", value);
			}
		}

        /// <summary>
        ///  
		/// 'Address1_ShippingMethodCode'.<br />
        /// Method of shipment for address 1.
        /// </summary>
		[AttributeLogicalName("address1_shippingmethodcode")]
		public Address1ShippingMethodEnum? Address1ShippingMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address1_shippingmethodcode");
				return (Address1ShippingMethodEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("address1_shippingmethodcode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("address1_shippingmethodcode", value);
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Address1_StateOrProvince'.<br />
        /// State or province for address 1.
        /// </summary>
		[AttributeLogicalName("address1_stateorprovince")]
		public string StateProvince
		{
			get
			{
				var value = GetAttributeValue<string>("address1_stateorprovince");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_stateorprovince", value);
			}
		}

        /// <summary>
        /// [MaxLength=64] 
		/// 'Address1_Telephone1'.<br />
        /// First telephone number associated with address 1.
        /// </summary>
		[AttributeLogicalName("address1_telephone1")]
		public string MainPhone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone1");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_telephone1", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'Address1_Telephone2'.<br />
        /// Second telephone number associated with address 1.
        /// </summary>
		[AttributeLogicalName("address1_telephone2")]
		public string OtherPhone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone2");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_telephone2", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'Address1_Telephone3'.<br />
        /// Third telephone number associated with address 1.
        /// </summary>
		[AttributeLogicalName("address1_telephone3")]
		public string Pager
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone3");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_telephone3", value);
			}
		}

        /// <summary>
        /// [MaxLength=4] 
		/// 'Address1_UPSZone'.<br />
        /// United Parcel Service (UPS) zone for address 1.
        /// </summary>
		[AttributeLogicalName("address1_upszone")]
		public string Address1UPSZone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_upszone");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_upszone", value);
			}
		}

        /// <summary>
        /// [Range(-1500, 1500)] 
		/// 'Address1_UTCOffset'.<br />
        /// UTC offset for address 1. This is the difference between local time and standard Coordinated Universal Time.
        /// </summary>
		[AttributeLogicalName("address1_utcoffset")]
		public int? Address1UTCOffset
		{
			get
			{
				var value = GetAttributeValue<int?>("address1_utcoffset");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_utcoffset", value);
			}
		}

        /// <summary>
        ///  
		/// 'Address2_AddressId'.<br />
        /// Unique identifier for address 2.
        /// </summary>
		[AttributeLogicalName("address2_addressid")]
		public Guid? Address2ID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("address2_addressid");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_addressid", value);
			}
		}

        /// <summary>
        ///  
		/// 'Address2_AddressTypeCode'.<br />
        /// Type of address for address 2, such as billing, shipping, or primary address.
        /// </summary>
		[AttributeLogicalName("address2_addresstypecode")]
		public Address2AddressTypeEnum? Address2AddressType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address2_addresstypecode");
				return (Address2AddressTypeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("address2_addresstypecode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("address2_addresstypecode", value);
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Address2_City'.<br />
        /// City name for address 2.
        /// </summary>
		[AttributeLogicalName("address2_city")]
		public string OtherCity
		{
			get
			{
				var value = GetAttributeValue<string>("address2_city");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_city", value);
			}
		}

        /// <summary>
        /// [MaxLength=1000] 
		/// 'Address2_Composite'.<br />
        /// Shows the complete secondary address.
        /// </summary>
		[AttributeLogicalName("address2_composite")]
		public string OtherAddress
		{
			get
			{
				var value = GetAttributeValue<string>("address2_composite");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Address2_Country'.<br />
        /// Country/region name in address 2.
        /// </summary>
		[AttributeLogicalName("address2_country")]
		public string OtherCountryRegion
		{
			get
			{
				var value = GetAttributeValue<string>("address2_country");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_country", value);
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Address2_County'.<br />
        /// County name for address 2.
        /// </summary>
		[AttributeLogicalName("address2_county")]
		public string Address2County
		{
			get
			{
				var value = GetAttributeValue<string>("address2_county");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_county", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'Address2_Fax'.<br />
        /// Fax number for address 2.
        /// </summary>
		[AttributeLogicalName("address2_fax")]
		public string Address2Fax
		{
			get
			{
				var value = GetAttributeValue<string>("address2_fax");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_fax", value);
			}
		}

        /// <summary>
        /// [Range(-90, 90)] 
		/// 'Address2_Latitude'.<br />
        /// Latitude for address 2.
        /// </summary>
		[AttributeLogicalName("address2_latitude")]
		public double? Address2Latitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address2_latitude");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_latitude", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'Address2_Line1'.<br />
        /// First line for entering address 2 information.
        /// </summary>
		[AttributeLogicalName("address2_line1")]
		public string OtherStreet1
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line1");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_line1", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'Address2_Line2'.<br />
        /// Second line for entering address 2 information.
        /// </summary>
		[AttributeLogicalName("address2_line2")]
		public string OtherStreet2
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line2");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_line2", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'Address2_Line3'.<br />
        /// Third line for entering address 2 information.
        /// </summary>
		[AttributeLogicalName("address2_line3")]
		public string OtherStreet3
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line3");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_line3", value);
			}
		}

        /// <summary>
        /// [Range(-180, 180)] 
		/// 'Address2_Longitude'.<br />
        /// Longitude for address 2.
        /// </summary>
		[AttributeLogicalName("address2_longitude")]
		public double? Address2Longitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address2_longitude");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_longitude", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'Address2_Name'.<br />
        /// Name to enter for address 2.
        /// </summary>
		[AttributeLogicalName("address2_name")]
		public string Address2Name
		{
			get
			{
				var value = GetAttributeValue<string>("address2_name");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_name", value);
			}
		}

        /// <summary>
        /// [MaxLength=40] 
		/// 'Address2_PostalCode'.<br />
        /// ZIP Code or postal code for address 2.
        /// </summary>
		[AttributeLogicalName("address2_postalcode")]
		public string OtherZIPPostalCode
		{
			get
			{
				var value = GetAttributeValue<string>("address2_postalcode");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_postalcode", value);
			}
		}

        /// <summary>
        /// [MaxLength=40] 
		/// 'Address2_PostOfficeBox'.<br />
        /// Post office box number for address 2.
        /// </summary>
		[AttributeLogicalName("address2_postofficebox")]
		public string Address2PostOfficeBox
		{
			get
			{
				var value = GetAttributeValue<string>("address2_postofficebox");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_postofficebox", value);
			}
		}

        /// <summary>
        ///  
		/// 'Address2_ShippingMethodCode'.<br />
        /// Method of shipment for address 2.
        /// </summary>
		[AttributeLogicalName("address2_shippingmethodcode")]
		public Address2ShippingMethodEnum? Address2ShippingMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address2_shippingmethodcode");
				return (Address2ShippingMethodEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("address2_shippingmethodcode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("address2_shippingmethodcode", value);
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Address2_StateOrProvince'.<br />
        /// State or province for address 2.
        /// </summary>
		[AttributeLogicalName("address2_stateorprovince")]
		public string OtherStateProvince
		{
			get
			{
				var value = GetAttributeValue<string>("address2_stateorprovince");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_stateorprovince", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'Address2_Telephone1'.<br />
        /// First telephone number associated with address 2.
        /// </summary>
		[AttributeLogicalName("address2_telephone1")]
		public string Address2Telephone1
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone1");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_telephone1", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'Address2_Telephone2'.<br />
        /// Second telephone number associated with address 2.
        /// </summary>
		[AttributeLogicalName("address2_telephone2")]
		public string Address2Telephone2
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone2");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_telephone2", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'Address2_Telephone3'.<br />
        /// Third telephone number associated with address 2.
        /// </summary>
		[AttributeLogicalName("address2_telephone3")]
		public string Address2Telephone3
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone3");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_telephone3", value);
			}
		}

        /// <summary>
        /// [MaxLength=4] 
		/// 'Address2_UPSZone'.<br />
        /// United Parcel Service (UPS) zone for address 2.
        /// </summary>
		[AttributeLogicalName("address2_upszone")]
		public string Address2UPSZone
		{
			get
			{
				var value = GetAttributeValue<string>("address2_upszone");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_upszone", value);
			}
		}

        /// <summary>
        /// [Range(-1500, 1500)] 
		/// 'Address2_UTCOffset'.<br />
        /// UTC offset for address 2. This is the difference between local time and standard Coordinated Universal Time.
        /// </summary>
		[AttributeLogicalName("address2_utcoffset")]
		public int? Address2UTCOffset
		{
			get
			{
				var value = GetAttributeValue<int?>("address2_utcoffset");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_utcoffset", value);
			}
		}

        /// <summary>
        ///  
		/// 'ApplicationId'.<br />
        /// The identifier for the application. This is used to access data in another application.
        /// </summary>
		[AttributeLogicalName("applicationid")]
		public Guid? ApplicationID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("applicationid");
			    return value;
			}
			set
			{
                SetAttributeValue("applicationid", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'ApplicationIdUri'.<br />
        /// The URI used as a unique logical identifier for the external app. This can be used to validate the application.
        /// </summary>
		[AttributeLogicalName("applicationiduri")]
		public string ApplicationIDURI
		{
			get
			{
				var value = GetAttributeValue<string>("applicationiduri");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'AzureActiveDirectoryObjectId'.<br />
        /// This is the application directory object Id.
        /// </summary>
		[AttributeLogicalName("azureactivedirectoryobjectid")]
		public Guid? AzureADObjectID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("azureactivedirectoryobjectid");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'BusinessUnitId'.<br />
        /// Unique identifier of the business unit with which the user is associated.
        /// </summary>
		[AttributeLogicalName("businessunitid")]
		public Guid? BusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("businessunitid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("businessunitid", new EntityReference("businessunit", value.Value));
                else
	                SetAttributeValue("businessunitid", value);
			}
		}

        public string BusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("businessunitid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CalendarId'.<br />
        /// Fiscal calendar associated with the user.
        /// </summary>
		[AttributeLogicalName("calendarid")]
		public Guid? Calendar
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("calendarid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("calendarid", new EntityReference("calendar", value.Value));
                else
	                SetAttributeValue("calendarid", value);
			}
		}

        public string CalendarName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("calendarid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CALType'.<br />
        /// License type of user.
        /// </summary>
		[AttributeLogicalName("caltype")]
		public LicenseTypeEnum? LicenseType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("caltype");
				return (LicenseTypeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("caltype", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("caltype", value);
			}
		}

		[AttributeLogicalName("cra_office")]
		public Guid? Office
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("cra_office");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("cra_office", new EntityReference("cra_craoffice", value.Value));
                else
	                SetAttributeValue("cra_office", value);
			}
		}

        public string OfficeName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("cra_office");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'cra_system_stakeholderId'.<br />
        /// This relationship connects the users in the system to the request as stakeholders
        /// </summary>
		[AttributeLogicalName("cra_system_stakeholderid")]
		public Guid? SystemStakeholder
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("cra_system_stakeholderid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("cra_system_stakeholderid", new EntityReference("opportunity", value.Value));
                else
	                SetAttributeValue("cra_system_stakeholderid", value);
			}
		}

        public string SystemStakeholderName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("cra_system_stakeholderid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=7] 
		/// 'cra_usr_id'.<br />
        /// CRA User Identifier (licence plate format)
        /// </summary>
		[AttributeLogicalName("cra_usr_id")]
		public string UserID
		{
			get
			{
				var value = GetAttributeValue<string>("cra_usr_id");
			    return value;
			}
			set
			{
                SetAttributeValue("cra_usr_id", value);
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the user.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Id;
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the user was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the systemuser.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Id;
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'DefaultFiltersPopulated'.<br />
        /// Indicates if default outlook filters have been populated.
        /// </summary>
		[AttributeLogicalName("defaultfilterspopulated")]
		public bool? DefaultFiltersPopulated
		{
			get
			{
				var value = GetAttributeValue<bool?>("defaultfilterspopulated");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'DefaultMailbox'.<br />
        /// Select the mailbox associated with this user.
        /// </summary>
		[AttributeLogicalName("defaultmailbox")]
		public Guid? Mailbox
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("defaultmailbox");
                return value?.Id;
			}
		}

        public string MailboxName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("defaultmailbox");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=200] 
		/// 'DefaultOdbFolderName'.<br />
        /// Type a default folder name for the user's OneDrive For Business location.
        /// </summary>
		[AttributeLogicalName("defaultodbfoldername")]
		public string DefaultOneDriveforBusinessFolderName
		{
			get
			{
				var value = GetAttributeValue<string>("defaultodbfoldername");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=500] 
		/// 'DisabledReason'.<br />
        /// Reason for disabling the user.
        /// </summary>
		[AttributeLogicalName("disabledreason")]
		public string DisabledReason
		{
			get
			{
				var value = GetAttributeValue<string>("disabledreason");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'DisplayInServiceViews'.<br />
        /// Whether to display the user in service views.
        /// </summary>
		[AttributeLogicalName("displayinserviceviews")]
		public bool? DisplayinServiceViews
		{
			get
			{
				var value = GetAttributeValue<bool?>("displayinserviceviews");
			    return value;
			}
			set
			{
                SetAttributeValue("displayinserviceviews", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'DomainName'.<br />
        /// Active Directory domain of which the user is a member.
        /// </summary>
		[AttributeLogicalName("domainname")]
		public string UserName
		{
			get
			{
				var value = GetAttributeValue<string>("domainname");
			    return value;
			}
			set
			{
                SetAttributeValue("domainname", value);
			}
		}

        /// <summary>
        ///  
		/// 'EmailRouterAccessApproval'.<br />
        /// Shows the status of the primary email address.
        /// </summary>
		[AttributeLogicalName("emailrouteraccessapproval")]
		public PrimaryEmailStatusEnum? PrimaryEmailStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("emailrouteraccessapproval");
				return (PrimaryEmailStatusEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("emailrouteraccessapproval", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("emailrouteraccessapproval", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'EmployeeId'.<br />
        /// Employee identifier for the user.
        /// </summary>
		[AttributeLogicalName("employeeid")]
		public string Employee
		{
			get
			{
				var value = GetAttributeValue<string>("employeeid");
			    return value;
			}
			set
			{
                SetAttributeValue("employeeid", value);
			}
		}

        /// <summary>
        ///  
		/// 'EntityImage'.<br />
        /// Shows the default image for the record.
        /// </summary>
		[AttributeLogicalName("entityimage")]
		public byte[] EntityImage
		{
			get
			{
				var value = GetAttributeValue<byte[]>("entityimage");
			    return value;
			}
			set
			{
                SetAttributeValue("entityimage", value);
			}
		}

        /// <summary>
        ///  
		/// 'EntityImage_Timestamp'.<br />
        ///  
        /// </summary>
		[AttributeLogicalName("entityimage_timestamp")]
		public long? EntityImage_Timestamp
		{
			get
			{
				var value = GetAttributeValue<long?>("entityimage_timestamp");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'EntityImage_URL'.<br />
        ///  
        /// </summary>
		[AttributeLogicalName("entityimage_url")]
		public string EntityImage_URL
		{
			get
			{
				var value = GetAttributeValue<string>("entityimage_url");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'EntityImageId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("entityimageid")]
		public Guid? EntityImageId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("entityimageid");
			    return value;
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Exchange rate for the currency associated with the systemuser with respect to the base currency.
        /// </summary>
		[AttributeLogicalName("exchangerate")]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
			    return value;
			}
		}

        /// <summary>
        /// [Required][MaxLength=256] 
		/// 'FirstName'.<br />
        /// First name of the user.
        /// </summary>
		[AttributeLogicalName("firstname")]
		public string FirstName
		{
			get
			{
				var value = GetAttributeValue<string>("firstname");
			    return value;
			}
			set
			{
                SetAttributeValue("firstname", value);
			}
		}

        /// <summary>
        /// [MaxLength=200] 
		/// 'FullName'.<br />
        /// Full name of the user.
        /// </summary>
		[AttributeLogicalName("fullname")]
		public string FullName
		{
			get
			{
				var value = GetAttributeValue<string>("fullname");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'GovernmentId'.<br />
        /// Government identifier for the user.
        /// </summary>
		[AttributeLogicalName("governmentid")]
		public string Government
		{
			get
			{
				var value = GetAttributeValue<string>("governmentid");
			    return value;
			}
			set
			{
                SetAttributeValue("governmentid", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'HomePhone'.<br />
        /// Home phone number for the user.
        /// </summary>
		[AttributeLogicalName("homephone")]
		public string HomePhone
		{
			get
			{
				var value = GetAttributeValue<string>("homephone");
			    return value;
			}
			set
			{
                SetAttributeValue("homephone", value);
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'IdentityId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("identityid")]
		public int? Uniqueuseridentityid
		{
			get
			{
				var value = GetAttributeValue<int?>("identityid");
			    return value;
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Unique identifier of the data import or data migration that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber")]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
			    return value;
			}
			set
			{
                SetAttributeValue("importsequencenumber", value);
			}
		}

        /// <summary>
        ///  
		/// 'IncomingEmailDeliveryMethod'.<br />
        /// Incoming email delivery method for the user.
        /// </summary>
		[AttributeLogicalName("incomingemaildeliverymethod")]
		public IncomingEmailDeliveryMethodEnum? IncomingEmailDeliveryMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("incomingemaildeliverymethod");
				return (IncomingEmailDeliveryMethodEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("incomingemaildeliverymethod", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("incomingemaildeliverymethod", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'InternalEMailAddress'.<br />
        /// Internal email address for the user.
        /// </summary>
		[AttributeLogicalName("internalemailaddress")]
		public string PrimaryEmail
		{
			get
			{
				var value = GetAttributeValue<string>("internalemailaddress");
			    return value;
			}
			set
			{
                SetAttributeValue("internalemailaddress", value);
			}
		}

        /// <summary>
        /// [Required] 
		/// 'InviteStatusCode'.<br />
        /// User invitation status.
        /// </summary>
		[AttributeLogicalName("invitestatuscode")]
		public InvitationStatusEnum? InvitationStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("invitestatuscode");
				return (InvitationStatusEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("invitestatuscode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("invitestatuscode", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsDisabled'.<br />
        /// Information about whether the user is enabled.
        /// </summary>
		[AttributeLogicalName("isdisabled")]
		public bool? Status
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdisabled");
			    return value;
			}
			set
			{
                SetAttributeValue("isdisabled", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsEmailAddressApprovedByO365Admin'.<br />
        /// Shows the status of approval of the email address by O365 Admin.
        /// </summary>
		[AttributeLogicalName("isemailaddressapprovedbyo365admin")]
		public bool? EmailAddressO365AdminApprovalStatus
		{
			get
			{
				var value = GetAttributeValue<bool?>("isemailaddressapprovedbyo365admin");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'IsIntegrationUser'.<br />
        /// Check if user is an integration user.
        /// </summary>
		[AttributeLogicalName("isintegrationuser")]
		public bool? Integrationusermode
		{
			get
			{
				var value = GetAttributeValue<bool?>("isintegrationuser");
			    return value;
			}
			set
			{
                SetAttributeValue("isintegrationuser", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsLicensed'.<br />
        /// Information about whether the user is licensed.
        /// </summary>
		[AttributeLogicalName("islicensed")]
		public bool? UserLicensed
		{
			get
			{
				var value = GetAttributeValue<bool?>("islicensed");
			    return value;
			}
			set
			{
                SetAttributeValue("islicensed", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsSyncWithDirectory'.<br />
        /// Information about whether the user is synced with the directory.
        /// </summary>
		[AttributeLogicalName("issyncwithdirectory")]
		public bool? UserSynced
		{
			get
			{
				var value = GetAttributeValue<bool?>("issyncwithdirectory");
			    return value;
			}
			set
			{
                SetAttributeValue("issyncwithdirectory", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'JobTitle'.<br />
        /// Job title of the user.
        /// </summary>
		[AttributeLogicalName("jobtitle")]
		public string JobTitle
		{
			get
			{
				var value = GetAttributeValue<string>("jobtitle");
			    return value;
			}
			set
			{
                SetAttributeValue("jobtitle", value);
			}
		}

        /// <summary>
        /// [Required][MaxLength=256] 
		/// 'LastName'.<br />
        /// Last name of the user.
        /// </summary>
		[AttributeLogicalName("lastname")]
		public string LastName
		{
			get
			{
				var value = GetAttributeValue<string>("lastname");
			    return value;
			}
			set
			{
                SetAttributeValue("lastname", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'MiddleName'.<br />
        /// Middle name of the user.
        /// </summary>
		[AttributeLogicalName("middlename")]
		public string MiddleName
		{
			get
			{
				var value = GetAttributeValue<string>("middlename");
			    return value;
			}
			set
			{
                SetAttributeValue("middlename", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'MobileAlertEMail'.<br />
        /// Mobile alert email address for the user.
        /// </summary>
		[AttributeLogicalName("mobilealertemail")]
		public string MobileAlertEmail
		{
			get
			{
				var value = GetAttributeValue<string>("mobilealertemail");
			    return value;
			}
			set
			{
                SetAttributeValue("mobilealertemail", value);
			}
		}

        /// <summary>
        ///  
		/// 'MobileOfflineProfileId'.<br />
        /// Items contained with a particular SystemUser.
        /// </summary>
		[AttributeLogicalName("mobileofflineprofileid")]
		public Guid? MobileOfflineProfile
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("mobileofflineprofileid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("mobileofflineprofileid", new EntityReference("mobileofflineprofile", value.Value));
                else
	                SetAttributeValue("mobileofflineprofileid", value);
			}
		}

        public string MobileOfflineProfileName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("mobileofflineprofileid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=64] 
		/// 'MobilePhone'.<br />
        /// Mobile phone number for the user.
        /// </summary>
		[AttributeLogicalName("mobilephone")]
		public string MobilePhone
		{
			get
			{
				var value = GetAttributeValue<string>("mobilephone");
			    return value;
			}
			set
			{
                SetAttributeValue("mobilephone", value);
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the user.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Id;
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the user was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the systemuser.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Id;
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'msdyn_gdproptout'.<br />
        /// Describes whether user is opted out or not
        /// </summary>
		[AttributeLogicalName("msdyn_gdproptout")]
		public bool? GDPROptout
		{
			get
			{
				var value = GetAttributeValue<bool?>("msdyn_gdproptout");
			    return value;
			}
			set
			{
                SetAttributeValue("msdyn_gdproptout", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'NickName'.<br />
        /// Nickname of the user.
        /// </summary>
		[AttributeLogicalName("nickname")]
		public string Nickname
		{
			get
			{
				var value = GetAttributeValue<string>("nickname");
			    return value;
			}
			set
			{
                SetAttributeValue("nickname", value);
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization associated with the user.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? Organization
		{
			get
			{
				var value = GetAttributeValue<Guid?>("organizationid");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'OutgoingEmailDeliveryMethod'.<br />
        /// Outgoing email delivery method for the user.
        /// </summary>
		[AttributeLogicalName("outgoingemaildeliverymethod")]
		public OutgoingEmailDeliveryMethodEnum? OutgoingEmailDeliveryMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("outgoingemaildeliverymethod");
				return (OutgoingEmailDeliveryMethodEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("outgoingemaildeliverymethod", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("outgoingemaildeliverymethod", value);
			}
		}

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
			    return value;
			}
			set
			{
                SetAttributeValue("overriddencreatedon", value);
			}
		}

        /// <summary>
        ///  
		/// 'ParentSystemUserId'.<br />
        /// Unique identifier of the manager of the user.
        /// </summary>
		[AttributeLogicalName("parentsystemuserid")]
		public Guid? Manager
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("parentsystemuserid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("parentsystemuserid", new EntityReference("systemuser", value.Value));
                else
	                SetAttributeValue("parentsystemuserid", value);
			}
		}

        public string ManagerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("parentsystemuserid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'PassportHi'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("passporthi")]
		public int? PassportHi
		{
			get
			{
				var value = GetAttributeValue<int?>("passporthi");
			    return value;
			}
			set
			{
                SetAttributeValue("passporthi", value);
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'PassportLo'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("passportlo")]
		public int? PassportLo
		{
			get
			{
				var value = GetAttributeValue<int?>("passportlo");
			    return value;
			}
			set
			{
                SetAttributeValue("passportlo", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'PersonalEMailAddress'.<br />
        /// Personal email address of the user.
        /// </summary>
		[AttributeLogicalName("personalemailaddress")]
		public string Email2
		{
			get
			{
				var value = GetAttributeValue<string>("personalemailaddress");
			    return value;
			}
			set
			{
                SetAttributeValue("personalemailaddress", value);
			}
		}

        /// <summary>
        /// [MaxLength=200] 
		/// 'PhotoUrl'.<br />
        /// URL for the Website on which a photo of the user is located.
        /// </summary>
		[AttributeLogicalName("photourl")]
		public string PhotoURL
		{
			get
			{
				var value = GetAttributeValue<string>("photourl");
			    return value;
			}
			set
			{
                SetAttributeValue("photourl", value);
			}
		}

        /// <summary>
        ///  
		/// 'PositionId'.<br />
        /// User's position in hierarchical security model.
        /// </summary>
		[AttributeLogicalName("positionid")]
		public Guid? Position
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("positionid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("positionid", new EntityReference("position", value.Value));
                else
	                SetAttributeValue("positionid", value);
			}
		}

        public string PositionName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("positionid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'PreferredAddressCode'.<br />
        /// Preferred address for the user.
        /// </summary>
		[AttributeLogicalName("preferredaddresscode")]
		public PreferredAddressEnum? PreferredAddress
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredaddresscode");
				return (PreferredAddressEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("preferredaddresscode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("preferredaddresscode", value);
			}
		}

        /// <summary>
        ///  
		/// 'PreferredEmailCode'.<br />
        /// Preferred email address for the user.
        /// </summary>
		[AttributeLogicalName("preferredemailcode")]
		public PreferredEmailEnum? PreferredEmail
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredemailcode");
				return (PreferredEmailEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("preferredemailcode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("preferredemailcode", value);
			}
		}

        /// <summary>
        ///  
		/// 'PreferredPhoneCode'.<br />
        /// Preferred phone number for the user.
        /// </summary>
		[AttributeLogicalName("preferredphonecode")]
		public PreferredPhoneEnum? PreferredPhone
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredphonecode");
				return (PreferredPhoneEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("preferredphonecode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("preferredphonecode", value);
			}
		}

        /// <summary>
        ///  
		/// 'ProcessId'.<br />
        /// Shows the ID of the process.
        /// </summary>
		[AttributeLogicalName("processid")]
		public Guid? Process
		{
			get
			{
				var value = GetAttributeValue<Guid?>("processid");
			    return value;
			}
			set
			{
                SetAttributeValue("processid", value);
			}
		}

        /// <summary>
        ///  
		/// 'QueueId'.<br />
        /// Unique identifier of the default queue for the user.
        /// </summary>
		[AttributeLogicalName("queueid")]
		public Guid? DefaultQueue
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("queueid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("queueid", new EntityReference("queue", value.Value));
                else
	                SetAttributeValue("queueid", value);
			}
		}

        public string DefaultQueueName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("queueid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=20] 
		/// 'Salutation'.<br />
        /// Salutation for correspondence with the user.
        /// </summary>
		[AttributeLogicalName("salutation")]
		public string Salutation
		{
			get
			{
				var value = GetAttributeValue<string>("salutation");
			    return value;
			}
			set
			{
                SetAttributeValue("salutation", value);
			}
		}

        /// <summary>
        ///  
		/// 'SetupUser'.<br />
        /// Check if user is a setup user.
        /// </summary>
		[AttributeLogicalName("setupuser")]
		public bool? RestrictedAccessMode
		{
			get
			{
				var value = GetAttributeValue<bool?>("setupuser");
			    return value;
			}
			set
			{
                SetAttributeValue("setupuser", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'SharePointEmailAddress'.<br />
        /// SharePoint Work Email Address
        /// </summary>
		[AttributeLogicalName("sharepointemailaddress")]
		public string SharePointEmailAddress
		{
			get
			{
				var value = GetAttributeValue<string>("sharepointemailaddress");
			    return value;
			}
			set
			{
                SetAttributeValue("sharepointemailaddress", value);
			}
		}

        /// <summary>
        ///  
		/// 'SiteId'.<br />
        /// site_system_users
        /// </summary>
		[AttributeLogicalName("siteid")]
		public Guid? Site
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("siteid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("siteid", new EntityReference("site", value.Value));
                else
	                SetAttributeValue("siteid", value);
			}
		}

        public string SiteName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("siteid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=100] 
		/// 'Skills'.<br />
        /// Skill set of the user.
        /// </summary>
		[AttributeLogicalName("skills")]
		public string Skills
		{
			get
			{
				var value = GetAttributeValue<string>("skills");
			    return value;
			}
			set
			{
                SetAttributeValue("skills", value);
			}
		}

        /// <summary>
        ///  
		/// 'StageId'.<br />
        /// Shows the ID of the stage.
        /// </summary>
		[AttributeLogicalName("stageid")]
		public Guid? __DeprecatedProcessStage
		{
			get
			{
				var value = GetAttributeValue<Guid?>("stageid");
			    return value;
			}
			set
			{
                SetAttributeValue("stageid", value);
			}
		}

        /// <summary>
        ///  
		/// 'SystemUserId'.<br />
        /// Unique identifier for the user.
        /// </summary>
		[AttributeLogicalName("systemuserid")]
		public Guid? UserId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("systemuserid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("systemuserid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

        /// <summary>
        ///  
		/// 'TerritoryId'.<br />
        /// territory_system_users
        /// </summary>
		[AttributeLogicalName("territoryid")]
		public Guid? Territory
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("territoryid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("territoryid", new EntityReference("territory", value.Value));
                else
	                SetAttributeValue("territoryid", value);
			}
		}

        public string TerritoryName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("territoryid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber")]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
			    return value;
			}
			set
			{
                SetAttributeValue("timezoneruleversionnumber", value);
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Title'.<br />
        /// Title of the user.
        /// </summary>
		[AttributeLogicalName("title")]
		public string Title
		{
			get
			{
				var value = GetAttributeValue<string>("title");
			    return value;
			}
			set
			{
                SetAttributeValue("title", value);
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Unique identifier of the currency associated with the systemuser.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? Currency
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
	                SetAttributeValue("transactioncurrencyid", value);
			}
		}

        public string CurrencyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=1250] 
		/// 'TraversedPath'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("traversedpath")]
		public string __DeprecatedTraversedPath
		{
			get
			{
				var value = GetAttributeValue<string>("traversedpath");
			    return value;
			}
			set
			{
                SetAttributeValue("traversedpath", value);
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'UserLicenseType'.<br />
        /// Shows the type of user license.
        /// </summary>
		[AttributeLogicalName("userlicensetype")]
		public int? UserLicenseType
		{
			get
			{
				var value = GetAttributeValue<int?>("userlicensetype");
			    return value;
			}
			set
			{
                SetAttributeValue("userlicensetype", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'UserPuid'.<br />
        ///  User PUID User Identifiable Information
        /// </summary>
		[AttributeLogicalName("userpuid")]
		public string UserPUID
		{
			get
			{
				var value = GetAttributeValue<string>("userpuid");
			    return value;
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode")]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
			    return value;
			}
			set
			{
                SetAttributeValue("utcconversiontimezonecode", value);
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version number of the user.
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? Versionnumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'WindowsLiveID'.<br />
        /// Windows Live ID
        /// </summary>
		[AttributeLogicalName("windowsliveid")]
		public string WindowsLiveID
		{
			get
			{
				var value = GetAttributeValue<string>("windowsliveid");
			    return value;
			}
			set
			{
                SetAttributeValue("windowsliveid", value);
			}
		}

        /// <summary>
        /// [MaxLength=200] 
		/// 'YammerEmailAddress'.<br />
        /// User's Yammer login email address
        /// </summary>
		[AttributeLogicalName("yammeremailaddress")]
		public string YammerEmail
		{
			get
			{
				var value = GetAttributeValue<string>("yammeremailaddress");
			    return value;
			}
			set
			{
                SetAttributeValue("yammeremailaddress", value);
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'YammerUserId'.<br />
        /// User's Yammer ID
        /// </summary>
		[AttributeLogicalName("yammeruserid")]
		public string YammerUserID
		{
			get
			{
				var value = GetAttributeValue<string>("yammeruserid");
			    return value;
			}
			set
			{
                SetAttributeValue("yammeruserid", value);
			}
		}

        /// <summary>
        /// [MaxLength=64] 
		/// 'YomiFirstName'.<br />
        /// Pronunciation of the first name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomifirstname")]
		public string YomiFirstName
		{
			get
			{
				var value = GetAttributeValue<string>("yomifirstname");
			    return value;
			}
			set
			{
                SetAttributeValue("yomifirstname", value);
			}
		}

        /// <summary>
        /// [MaxLength=200] 
		/// 'YomiFullName'.<br />
        /// Pronunciation of the full name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomifullname")]
		public string YomiFullName
		{
			get
			{
				var value = GetAttributeValue<string>("yomifullname");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=64] 
		/// 'YomiLastName'.<br />
        /// Pronunciation of the last name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomilastname")]
		public string YomiLastName
		{
			get
			{
				var value = GetAttributeValue<string>("yomilastname");
			    return value;
			}
			set
			{
                SetAttributeValue("yomilastname", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'YomiMiddleName'.<br />
        /// Pronunciation of the middle name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomimiddlename")]
		public string YomiMiddleName
		{
			get
			{
				var value = GetAttributeValue<string>("yomimiddlename");
			    return value;
			}
			set
			{
                SetAttributeValue("yomimiddlename", value);
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'jms_systemuser_jms_delegation_AlsoNotifyUser'
		/// </summary>
		[RelationshipSchemaName("jms_systemuser_jms_delegation_AlsoNotifyUser")]
		public Delegation[] DelegationsOfAlsoNotifyUser
		{
			get => GetRelatedEntities<Delegation>("jms_systemuser_jms_delegation_AlsoNotifyUser", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("jms_systemuser_jms_delegation_AlsoNotifyUser", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'jms_systemuser_jms_delegation_Delegated'
		/// </summary>
		[RelationshipSchemaName("jms_systemuser_jms_delegation_Delegated")]
		public Delegation[] DelegationsOfDelegatedUser
		{
			get => GetRelatedEntities<Delegation>("jms_systemuser_jms_delegation_Delegated", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("jms_systemuser_jms_delegation_Delegated", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'jms_systemuser_jms_delegation_Delegating'
		/// </summary>
		[RelationshipSchemaName("jms_systemuser_jms_delegation_Delegating")]
		public Delegation[] DelegationsOfDelegatingUser
		{
			get => GetRelatedEntities<Delegation>("jms_systemuser_jms_delegation_Delegating", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("jms_systemuser_jms_delegation_Delegating", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_jms_customtrigger_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_customtrigger_createdby")]
		public CustomTrigger[] CustomTriggersOfCreatedBy
		{
			get => GetRelatedEntities<CustomTrigger>("lk_jms_customtrigger_createdby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_jms_customtrigger_createdby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_jms_customtrigger_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_customtrigger_createdonbehalfby")]
		public CustomTrigger[] CustomTriggersOfCreatedByDelegate
		{
			get => GetRelatedEntities<CustomTrigger>("lk_jms_customtrigger_createdonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_jms_customtrigger_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_jms_customtrigger_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_customtrigger_modifiedby")]
		public CustomTrigger[] CustomTriggersOfModifiedBy
		{
			get => GetRelatedEntities<CustomTrigger>("lk_jms_customtrigger_modifiedby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_jms_customtrigger_modifiedby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_jms_customtrigger_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_customtrigger_modifiedonbehalfby")]
		public CustomTrigger[] CustomTriggersOfModifiedByDelegate
		{
			get => GetRelatedEntities<CustomTrigger>("lk_jms_customtrigger_modifiedonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_jms_customtrigger_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_jms_delegation_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegation_createdby")]
		public Delegation[] DelegationsOfCreatedBy
		{
			get => GetRelatedEntities<Delegation>("lk_jms_delegation_createdby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_jms_delegation_createdby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_jms_delegation_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegation_createdonbehalfby")]
		public Delegation[] DelegationsOfCreatedByDelegate
		{
			get => GetRelatedEntities<Delegation>("lk_jms_delegation_createdonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_jms_delegation_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_jms_delegation_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegation_modifiedby")]
		public Delegation[] DelegationsOfModifiedBy
		{
			get => GetRelatedEntities<Delegation>("lk_jms_delegation_modifiedby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_jms_delegation_modifiedby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_jms_delegation_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegation_modifiedonbehalfby")]
		public Delegation[] DelegationsOfModifiedByDelegate
		{
			get => GetRelatedEntities<Delegation>("lk_jms_delegation_modifiedonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_jms_delegation_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_jms_delegationreassignconfiguration_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegationreassignconfiguration_createdby")]
		public DelegationReassignConfiguration[] DelegationReassignConfigurationsOfCreatedBy
		{
			get => GetRelatedEntities<DelegationReassignConfiguration>("lk_jms_delegationreassignconfiguration_createdby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_jms_delegationreassignconfiguration_createdby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_jms_delegationreassignconfiguration_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegationreassignconfiguration_createdonbehalfby")]
		public DelegationReassignConfiguration[] DelegationReassignConfigurationsOfCreatedByDelegate
		{
			get => GetRelatedEntities<DelegationReassignConfiguration>("lk_jms_delegationreassignconfiguration_createdonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_jms_delegationreassignconfiguration_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_jms_delegationreassignconfiguration_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegationreassignconfiguration_modifiedby")]
		public DelegationReassignConfiguration[] DelegationReassignConfigurationsOfModifiedBy
		{
			get => GetRelatedEntities<DelegationReassignConfiguration>("lk_jms_delegationreassignconfiguration_modifiedby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_jms_delegationreassignconfiguration_modifiedby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_jms_delegationreassignconfiguration_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegationreassignconfiguration_modifiedonbehalfby")]
		public DelegationReassignConfiguration[] DelegationReassignConfigurationsOfModifiedByDelegate
		{
			get => GetRelatedEntities<DelegationReassignConfiguration>("lk_jms_delegationreassignconfiguration_modifiedonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_jms_delegationreassignconfiguration_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_jms_delegationreassignrecord_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegationreassignrecord_createdby")]
		public DelegationReassignRecord[] DelegationReassignRecordsOfCreatedBy
		{
			get => GetRelatedEntities<DelegationReassignRecord>("lk_jms_delegationreassignrecord_createdby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_jms_delegationreassignrecord_createdby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_jms_delegationreassignrecord_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegationreassignrecord_createdonbehalfby")]
		public DelegationReassignRecord[] DelegationReassignRecordsOfCreatedByDelegate
		{
			get => GetRelatedEntities<DelegationReassignRecord>("lk_jms_delegationreassignrecord_createdonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_jms_delegationreassignrecord_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_jms_delegationreassignrecord_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegationreassignrecord_modifiedby")]
		public DelegationReassignRecord[] DelegationReassignRecordsOfModifiedBy
		{
			get => GetRelatedEntities<DelegationReassignRecord>("lk_jms_delegationreassignrecord_modifiedby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_jms_delegationreassignrecord_modifiedby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_jms_delegationreassignrecord_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_jms_delegationreassignrecord_modifiedonbehalfby")]
		public DelegationReassignRecord[] DelegationReassignRecordsOfModifiedByDelegate
		{
			get => GetRelatedEntities<DelegationReassignRecord>("lk_jms_delegationreassignrecord_modifiedonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_jms_delegationreassignrecord_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_role_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_role_createdonbehalfby")]
		public SecurityRole[] SecurityRolesOfCreatedByImpersonator
		{
			get => GetRelatedEntities<SecurityRole>("lk_role_createdonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_role_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_role_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_role_modifiedonbehalfby")]
		public SecurityRole[] SecurityRolesOfModifiedByDelegate
		{
			get => GetRelatedEntities<SecurityRole>("lk_role_modifiedonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_role_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_rolebase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_rolebase_createdby")]
		public SecurityRole[] SecurityRolesOfCreatedBy
		{
			get => GetRelatedEntities<SecurityRole>("lk_rolebase_createdby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_rolebase_createdby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_rolebase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_rolebase_modifiedby")]
		public SecurityRole[] SecurityRolesOfModifiedBy
		{
			get => GetRelatedEntities<SecurityRole>("lk_rolebase_modifiedby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_rolebase_modifiedby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuser_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfCreatedByDelegate
		{
			get => GetRelatedEntities<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuser_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfModifiedByDelegate
		{
			get => GetRelatedEntities<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuserbase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfCreatedBy
		{
			get => GetRelatedEntities<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuserbase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfModifiedBy
		{
			get => GetRelatedEntities<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_team_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_team_createdonbehalfby")]
		public Team[] TeamsOfCreatedByDelegate
		{
			get => GetRelatedEntities<Team>("lk_team_createdonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_team_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_team_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_team_modifiedonbehalfby")]
		public Team[] TeamsOfModifiedByDelegate
		{
			get => GetRelatedEntities<Team>("lk_team_modifiedonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_team_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_teambase_administratorid'
		/// </summary>
		[RelationshipSchemaName("lk_teambase_administratorid")]
		public Team[] TeamsOfAdministrator
		{
			get => GetRelatedEntities<Team>("lk_teambase_administratorid", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_teambase_administratorid", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_teambase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_teambase_createdby")]
		public Team[] TeamsOfCreatedBy
		{
			get => GetRelatedEntities<Team>("lk_teambase_createdby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_teambase_createdby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_teambase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_teambase_modifiedby")]
		public Team[] TeamsOfModifiedBy
		{
			get => GetRelatedEntities<Team>("lk_teambase_modifiedby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_teambase_modifiedby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'user_parent_user'
		/// </summary>
		[RelationshipSchemaName("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfManager
		{
			get => GetRelatedEntities<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuser_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get => GetRelatedEntity<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuser_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get => GetRelatedEntity<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuserbase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get => GetRelatedEntity<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuserbase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get => GetRelatedEntity<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		/// <summary>
		/// N:1, 'user_parent_user'
		/// </summary>
		[RelationshipSchemaName("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("parentsystemuserid")]
		public User UserAsManager
		{
			get => GetRelatedEntity<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		/// <summary>
		/// N:N, 'systemuserroles_association'
		/// </summary>
		[RelationshipSchemaName("systemuserroles_association")]
		public SecurityRole[] SecurityRolesOfsystemuserroles_association

		{
			get => GetRelatedEntities<SecurityRole>("systemuserroles_association", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("systemuserroles_association", null, value);
			}
		}
		
		/// <summary>
		/// N:N, 'teammembership_association'
		/// </summary>
		[RelationshipSchemaName("teammembership_association")]
		public Team[] TeamsOfteammembership_association

		{
			get => GetRelatedEntities<Team>("teammembership_association", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("teammembership_association", null, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName DelegationsOfAlsoNotifyUser = new RelationName("DelegationsOfAlsoNotifyUser");
			public static RelationName DelegationsOfDelegatedUser = new RelationName("DelegationsOfDelegatedUser");
			public static RelationName DelegationsOfDelegatingUser = new RelationName("DelegationsOfDelegatingUser");
			public static RelationName CustomTriggersOfCreatedBy = new RelationName("CustomTriggersOfCreatedBy");
			public static RelationName CustomTriggersOfCreatedByDelegate = new RelationName("CustomTriggersOfCreatedByDelegate");
			public static RelationName CustomTriggersOfModifiedBy = new RelationName("CustomTriggersOfModifiedBy");
			public static RelationName CustomTriggersOfModifiedByDelegate = new RelationName("CustomTriggersOfModifiedByDelegate");
			public static RelationName DelegationsOfCreatedBy = new RelationName("DelegationsOfCreatedBy");
			public static RelationName DelegationsOfCreatedByDelegate = new RelationName("DelegationsOfCreatedByDelegate");
			public static RelationName DelegationsOfModifiedBy = new RelationName("DelegationsOfModifiedBy");
			public static RelationName DelegationsOfModifiedByDelegate = new RelationName("DelegationsOfModifiedByDelegate");
			public static RelationName DelegationReassignConfigurationsOfCreatedBy = new RelationName("DelegationReassignConfigurationsOfCreatedBy");
			public static RelationName DelegationReassignConfigurationsOfCreatedByDelegate = new RelationName("DelegationReassignConfigurationsOfCreatedByDelegate");
			public static RelationName DelegationReassignConfigurationsOfModifiedBy = new RelationName("DelegationReassignConfigurationsOfModifiedBy");
			public static RelationName DelegationReassignConfigurationsOfModifiedByDelegate = new RelationName("DelegationReassignConfigurationsOfModifiedByDelegate");
			public static RelationName DelegationReassignRecordsOfCreatedBy = new RelationName("DelegationReassignRecordsOfCreatedBy");
			public static RelationName DelegationReassignRecordsOfCreatedByDelegate = new RelationName("DelegationReassignRecordsOfCreatedByDelegate");
			public static RelationName DelegationReassignRecordsOfModifiedBy = new RelationName("DelegationReassignRecordsOfModifiedBy");
			public static RelationName DelegationReassignRecordsOfModifiedByDelegate = new RelationName("DelegationReassignRecordsOfModifiedByDelegate");
			public static RelationName SecurityRolesOfCreatedByImpersonator = new RelationName("SecurityRolesOfCreatedByImpersonator");
			public static RelationName SecurityRolesOfModifiedByDelegate = new RelationName("SecurityRolesOfModifiedByDelegate");
			public static RelationName SecurityRolesOfCreatedBy = new RelationName("SecurityRolesOfCreatedBy");
			public static RelationName SecurityRolesOfModifiedBy = new RelationName("SecurityRolesOfModifiedBy");
			public static RelationName UsersOfCreatedByDelegate = new RelationName("UsersOfCreatedByDelegate");
			public static RelationName UsersOfModifiedByDelegate = new RelationName("UsersOfModifiedByDelegate");
			public static RelationName UsersOfCreatedBy = new RelationName("UsersOfCreatedBy");
			public static RelationName UsersOfModifiedBy = new RelationName("UsersOfModifiedBy");
			public static RelationName TeamsOfCreatedByDelegate = new RelationName("TeamsOfCreatedByDelegate");
			public static RelationName TeamsOfModifiedByDelegate = new RelationName("TeamsOfModifiedByDelegate");
			public static RelationName TeamsOfAdministrator = new RelationName("TeamsOfAdministrator");
			public static RelationName TeamsOfCreatedBy = new RelationName("TeamsOfCreatedBy");
			public static RelationName TeamsOfModifiedBy = new RelationName("TeamsOfModifiedBy");
			public static RelationName UsersOfManager = new RelationName("UsersOfManager");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsManager = new RelationName("UserAsManager");
			public static RelationName SecurityRolesOfsystemuserroles_association = new RelationName("SecurityRolesOfsystemuserroles_association");
			public static RelationName TeamsOfteammembership_association = new RelationName("TeamsOfteammembership_association");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["DelegationsOfAlsoNotifyUser"] = new object[] { "DelegationsOfAlsoNotifyUser", "jms_delegation", "systemuser", "jms_alsonotifyuser", "systemuserid", "systemuserid", "systemuserid", "jms_systemuser_jms_delegation_AlsoNotifyUser", typeof (Delegation[]) };
			relationProperties["DelegationsOfDelegatedUser"] = new object[] { "DelegationsOfDelegatedUser", "jms_delegation", "systemuser", "jms_delegated", "systemuserid", "systemuserid", "systemuserid", "jms_systemuser_jms_delegation_Delegated", typeof (Delegation[]) };
			relationProperties["DelegationsOfDelegatingUser"] = new object[] { "DelegationsOfDelegatingUser", "jms_delegation", "systemuser", "jms_delegating", "systemuserid", "systemuserid", "systemuserid", "jms_systemuser_jms_delegation_Delegating", typeof (Delegation[]) };
			relationProperties["CustomTriggersOfCreatedBy"] = new object[] { "CustomTriggersOfCreatedBy", "jms_customtrigger", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_jms_customtrigger_createdby", typeof (CustomTrigger[]) };
			relationProperties["CustomTriggersOfCreatedByDelegate"] = new object[] { "CustomTriggersOfCreatedByDelegate", "jms_customtrigger", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_jms_customtrigger_createdonbehalfby", typeof (CustomTrigger[]) };
			relationProperties["CustomTriggersOfModifiedBy"] = new object[] { "CustomTriggersOfModifiedBy", "jms_customtrigger", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_jms_customtrigger_modifiedby", typeof (CustomTrigger[]) };
			relationProperties["CustomTriggersOfModifiedByDelegate"] = new object[] { "CustomTriggersOfModifiedByDelegate", "jms_customtrigger", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_jms_customtrigger_modifiedonbehalfby", typeof (CustomTrigger[]) };
			relationProperties["DelegationsOfCreatedBy"] = new object[] { "DelegationsOfCreatedBy", "jms_delegation", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_jms_delegation_createdby", typeof (Delegation[]) };
			relationProperties["DelegationsOfCreatedByDelegate"] = new object[] { "DelegationsOfCreatedByDelegate", "jms_delegation", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_jms_delegation_createdonbehalfby", typeof (Delegation[]) };
			relationProperties["DelegationsOfModifiedBy"] = new object[] { "DelegationsOfModifiedBy", "jms_delegation", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_jms_delegation_modifiedby", typeof (Delegation[]) };
			relationProperties["DelegationsOfModifiedByDelegate"] = new object[] { "DelegationsOfModifiedByDelegate", "jms_delegation", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_jms_delegation_modifiedonbehalfby", typeof (Delegation[]) };
			relationProperties["DelegationReassignConfigurationsOfCreatedBy"] = new object[] { "DelegationReassignConfigurationsOfCreatedBy", "jms_delegationreassignconfiguration", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_jms_delegationreassignconfiguration_createdby", typeof (DelegationReassignConfiguration[]) };
			relationProperties["DelegationReassignConfigurationsOfCreatedByDelegate"] = new object[] { "DelegationReassignConfigurationsOfCreatedByDelegate", "jms_delegationreassignconfiguration", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_jms_delegationreassignconfiguration_createdonbehalfby", typeof (DelegationReassignConfiguration[]) };
			relationProperties["DelegationReassignConfigurationsOfModifiedBy"] = new object[] { "DelegationReassignConfigurationsOfModifiedBy", "jms_delegationreassignconfiguration", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_jms_delegationreassignconfiguration_modifiedby", typeof (DelegationReassignConfiguration[]) };
			relationProperties["DelegationReassignConfigurationsOfModifiedByDelegate"] = new object[] { "DelegationReassignConfigurationsOfModifiedByDelegate", "jms_delegationreassignconfiguration", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_jms_delegationreassignconfiguration_modifiedonbehalfby", typeof (DelegationReassignConfiguration[]) };
			relationProperties["DelegationReassignRecordsOfCreatedBy"] = new object[] { "DelegationReassignRecordsOfCreatedBy", "jms_delegationreassignrecord", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_jms_delegationreassignrecord_createdby", typeof (DelegationReassignRecord[]) };
			relationProperties["DelegationReassignRecordsOfCreatedByDelegate"] = new object[] { "DelegationReassignRecordsOfCreatedByDelegate", "jms_delegationreassignrecord", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_jms_delegationreassignrecord_createdonbehalfby", typeof (DelegationReassignRecord[]) };
			relationProperties["DelegationReassignRecordsOfModifiedBy"] = new object[] { "DelegationReassignRecordsOfModifiedBy", "jms_delegationreassignrecord", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_jms_delegationreassignrecord_modifiedby", typeof (DelegationReassignRecord[]) };
			relationProperties["DelegationReassignRecordsOfModifiedByDelegate"] = new object[] { "DelegationReassignRecordsOfModifiedByDelegate", "jms_delegationreassignrecord", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_jms_delegationreassignrecord_modifiedonbehalfby", typeof (DelegationReassignRecord[]) };
			relationProperties["SecurityRolesOfCreatedByImpersonator"] = new object[] { "SecurityRolesOfCreatedByImpersonator", "role", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_role_createdonbehalfby", typeof (SecurityRole[]) };
			relationProperties["SecurityRolesOfModifiedByDelegate"] = new object[] { "SecurityRolesOfModifiedByDelegate", "role", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_role_modifiedonbehalfby", typeof (SecurityRole[]) };
			relationProperties["SecurityRolesOfCreatedBy"] = new object[] { "SecurityRolesOfCreatedBy", "role", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_rolebase_createdby", typeof (SecurityRole[]) };
			relationProperties["SecurityRolesOfModifiedBy"] = new object[] { "SecurityRolesOfModifiedBy", "role", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_rolebase_modifiedby", typeof (SecurityRole[]) };
			relationProperties["UsersOfCreatedByDelegate"] = new object[] { "UsersOfCreatedByDelegate", "systemuser", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuser_createdonbehalfby", typeof (User[]) };
			relationProperties["UsersOfModifiedByDelegate"] = new object[] { "UsersOfModifiedByDelegate", "systemuser", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuser_modifiedonbehalfby", typeof (User[]) };
			relationProperties["UsersOfCreatedBy"] = new object[] { "UsersOfCreatedBy", "systemuser", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuserbase_createdby", typeof (User[]) };
			relationProperties["UsersOfModifiedBy"] = new object[] { "UsersOfModifiedBy", "systemuser", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuserbase_modifiedby", typeof (User[]) };
			relationProperties["TeamsOfCreatedByDelegate"] = new object[] { "TeamsOfCreatedByDelegate", "team", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_team_createdonbehalfby", typeof (Team[]) };
			relationProperties["TeamsOfModifiedByDelegate"] = new object[] { "TeamsOfModifiedByDelegate", "team", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_team_modifiedonbehalfby", typeof (Team[]) };
			relationProperties["TeamsOfAdministrator"] = new object[] { "TeamsOfAdministrator", "team", "systemuser", "administratorid", "systemuserid", "systemuserid", "systemuserid", "lk_teambase_administratorid", typeof (Team[]) };
			relationProperties["TeamsOfCreatedBy"] = new object[] { "TeamsOfCreatedBy", "team", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_teambase_createdby", typeof (Team[]) };
			relationProperties["TeamsOfModifiedBy"] = new object[] { "TeamsOfModifiedBy", "team", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_teambase_modifiedby", typeof (Team[]) };
			relationProperties["UsersOfManager"] = new object[] { "UsersOfManager", "systemuser", "systemuser", "parentsystemuserid", "systemuserid", "systemuserid", "systemuserid", "user_parent_user", typeof (User[]) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "systemuser", "systemuserid", "createdonbehalfby", "systemuserid", "systemuserid", "lk_systemuser_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "systemuser", "systemuserid", "modifiedonbehalfby", "systemuserid", "systemuserid", "lk_systemuser_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "systemuser", "systemuserid", "createdby", "systemuserid", "systemuserid", "lk_systemuserbase_createdby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "systemuser", "systemuserid", "modifiedby", "systemuserid", "systemuserid", "lk_systemuserbase_modifiedby", typeof (User) };
			relationProperties["UserAsManager"] = new object[] { "UserAsManager", "systemuser", "systemuser", "systemuserid", "parentsystemuserid", "systemuserid", "systemuserid", "user_parent_user", typeof (User) };
			relationProperties["SecurityRolesOfsystemuserroles_association"] = new object[] { "SecurityRolesOfsystemuserroles_association", "role", "systemuserroles", "roleid", "roleid", "systemuserid", "systemuserid", "systemuserroles_association", typeof (SecurityRole[]) };
			relationProperties["TeamsOfteammembership_association"] = new object[] { "TeamsOfteammembership_association", "team", "teammembership", "teamid", "teamid", "systemuserid", "systemuserid", "teammembership_association", typeof (Team[]) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public User(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["systemuserid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		public enum AccessModeEnum
		{
			ReadWrite = 0,
			Administrative = 1,
			Read = 2,
			SupportUser = 3,
			Noninteractive = 4,
			DelegatedAdmin = 5,
		}
	
		public enum Address1AddressTypeEnum
		{
			DefaultValue = 1,
		}
	
		public enum Address1ShippingMethodEnum
		{
			DefaultValue = 1,
		}
	
		public enum Address2AddressTypeEnum
		{
			DefaultValue = 1,
		}
	
		public enum Address2ShippingMethodEnum
		{
			DefaultValue = 1,
		}
	
		public enum LicenseTypeEnum
		{
			Professional = 0,
			Administrative = 1,
			Basic = 2,
			DeviceProfessional = 3,
			DeviceBasic = 4,
			Essential = 5,
			DeviceEssential = 6,
			Enterprise = 7,
			DeviceEnterprise = 8,
			Sales = 9,
			Service = 10,
			FieldService = 11,
			ProjectService = 12,
		}
	
		public enum DefaultFiltersPopulatedEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum DisplayinServiceViewsEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum PrimaryEmailStatusEnum
		{
			Empty = 0,
			Approved = 1,
			PendingApproval = 2,
			Rejected = 3,
		}
	
		public enum IncomingEmailDeliveryMethodEnum
		{
			None = 0,
			MicrosoftDynamics365forOutlook = 1,
			ServerSideSynchronizationorEmailRouter = 2,
			ForwardMailbox = 3,
		}
	
		public enum InvitationStatusEnum
		{
			InvitationNotSent = 0,
			Invited = 1,
			InvitationNearExpired = 2,
			InvitationExpired = 3,
			InvitationAccepted = 4,
			InvitationRejected = 5,
			InvitationRevoked = 6,
		}
	
		public enum StatusEnum
		{
			Disabled = 1,
			Enabled = 0,
		}
	
		public enum EmailAddressO365AdminApprovalStatusEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum IntegrationusermodeEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum UserLicensedEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum UserSyncedEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum GDPROptoutEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum OutgoingEmailDeliveryMethodEnum
		{
			None = 0,
			MicrosoftDynamics365forOutlook = 1,
			ServerSideSynchronizationorEmailRouter = 2,
		}
	
		public enum PreferredAddressEnum
		{
			MailingAddress = 1,
			OtherAddress = 2,
		}
	
		public enum PreferredEmailEnum
		{
			DefaultValue = 1,
		}
	
		public enum PreferredPhoneEnum
		{
			MainPhone = 1,
			OtherPhone = 2,
			HomePhone = 3,
			MobilePhone = 4,
		}
	
		public enum RestrictedAccessModeEnum
		{
			Yes = 1,
			No = 0,
		}
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string AccessMode = "accessmode";
			public const string Address1ID = "address1_addressid";
			public const string Address1AddressType = "address1_addresstypecode";
			public const string City = "address1_city";
			public const string Address = "address1_composite";
			public const string CountryRegion = "address1_country";
			public const string Address1County = "address1_county";
			public const string Address1Fax = "address1_fax";
			public const string Address1Latitude = "address1_latitude";
			public const string Street1 = "address1_line1";
			public const string Street2 = "address1_line2";
			public const string Street3 = "address1_line3";
			public const string Address1Longitude = "address1_longitude";
			public const string Address1Name = "address1_name";
			public const string ZIPPostalCode = "address1_postalcode";
			public const string Address1PostOfficeBox = "address1_postofficebox";
			public const string Address1ShippingMethod = "address1_shippingmethodcode";
			public const string StateProvince = "address1_stateorprovince";
			public const string MainPhone = "address1_telephone1";
			public const string OtherPhone = "address1_telephone2";
			public const string Pager = "address1_telephone3";
			public const string Address1UPSZone = "address1_upszone";
			public const string Address1UTCOffset = "address1_utcoffset";
			public const string Address2ID = "address2_addressid";
			public const string Address2AddressType = "address2_addresstypecode";
			public const string OtherCity = "address2_city";
			public const string OtherAddress = "address2_composite";
			public const string OtherCountryRegion = "address2_country";
			public const string Address2County = "address2_county";
			public const string Address2Fax = "address2_fax";
			public const string Address2Latitude = "address2_latitude";
			public const string OtherStreet1 = "address2_line1";
			public const string OtherStreet2 = "address2_line2";
			public const string OtherStreet3 = "address2_line3";
			public const string Address2Longitude = "address2_longitude";
			public const string Address2Name = "address2_name";
			public const string OtherZIPPostalCode = "address2_postalcode";
			public const string Address2PostOfficeBox = "address2_postofficebox";
			public const string Address2ShippingMethod = "address2_shippingmethodcode";
			public const string OtherStateProvince = "address2_stateorprovince";
			public const string Address2Telephone1 = "address2_telephone1";
			public const string Address2Telephone2 = "address2_telephone2";
			public const string Address2Telephone3 = "address2_telephone3";
			public const string Address2UPSZone = "address2_upszone";
			public const string Address2UTCOffset = "address2_utcoffset";
			public const string ApplicationID = "applicationid";
			public const string ApplicationIDURI = "applicationiduri";
			public const string AzureADObjectID = "azureactivedirectoryobjectid";
			public const string BusinessUnit = "businessunitid";
			public const string Calendar = "calendarid";
			public const string LicenseType = "caltype";
			public const string Office = "cra_office";
			public const string SystemStakeholder = "cra_system_stakeholderid";
			public const string UserID = "cra_usr_id";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string DefaultFiltersPopulated = "defaultfilterspopulated";
			public const string Mailbox = "defaultmailbox";
			public const string DefaultOneDriveforBusinessFolderName = "defaultodbfoldername";
			public const string DisabledReason = "disabledreason";
			public const string DisplayinServiceViews = "displayinserviceviews";
			public const string UserName = "domainname";
			public const string PrimaryEmailStatus = "emailrouteraccessapproval";
			public const string Employee = "employeeid";
			public const string EntityImage = "entityimage";
			public const string EntityImage_Timestamp = "entityimage_timestamp";
			public const string EntityImage_URL = "entityimage_url";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string FirstName = "firstname";
			public const string FullName = "fullname";
			public const string Government = "governmentid";
			public const string HomePhone = "homephone";
			public const string Uniqueuseridentityid = "identityid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IncomingEmailDeliveryMethod = "incomingemaildeliverymethod";
			public const string PrimaryEmail = "internalemailaddress";
			public const string InvitationStatus = "invitestatuscode";
			public const string Status = "isdisabled";
			public const string EmailAddressO365AdminApprovalStatus = "isemailaddressapprovedbyo365admin";
			public const string Integrationusermode = "isintegrationuser";
			public const string UserLicensed = "islicensed";
			public const string UserSynced = "issyncwithdirectory";
			public const string JobTitle = "jobtitle";
			public const string LastName = "lastname";
			public const string MiddleName = "middlename";
			public const string MobileAlertEmail = "mobilealertemail";
			public const string MobileOfflineProfile = "mobileofflineprofileid";
			public const string MobilePhone = "mobilephone";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string GDPROptout = "msdyn_gdproptout";
			public const string Nickname = "nickname";
			public const string Organization = "organizationid";
			public const string OutgoingEmailDeliveryMethod = "outgoingemaildeliverymethod";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Manager = "parentsystemuserid";
			public const string PassportHi = "passporthi";
			public const string PassportLo = "passportlo";
			public const string Email2 = "personalemailaddress";
			public const string PhotoURL = "photourl";
			public const string Position = "positionid";
			public const string PreferredAddress = "preferredaddresscode";
			public const string PreferredEmail = "preferredemailcode";
			public const string PreferredPhone = "preferredphonecode";
			public const string Process = "processid";
			public const string DefaultQueue = "queueid";
			public const string Salutation = "salutation";
			public const string RestrictedAccessMode = "setupuser";
			public const string SharePointEmailAddress = "sharepointemailaddress";
			public const string Site = "siteid";
			public const string Skills = "skills";
			public const string __DeprecatedProcessStage = "stageid";
			public const string UserId = "systemuserid";
			public const string Territory = "territoryid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string Currency = "transactioncurrencyid";
			public const string __DeprecatedTraversedPath = "traversedpath";
			public const string UserLicenseType = "userlicensetype";
			public const string UserPUID = "userpuid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string Versionnumber = "versionnumber";
			public const string WindowsLiveID = "windowsliveid";
			public const string YammerEmail = "yammeremailaddress";
			public const string YammerUserID = "yammeruserid";
			public const string YomiFirstName = "yomifirstname";
			public const string YomiFullName = "yomifullname";
			public const string YomiLastName = "yomilastname";
			public const string YomiMiddleName = "yomimiddlename";

			#endregion
		}

		#endregion

		#endregion
	}

	#endregion

	#region SystemUserRoles

	/// <summary>
	/// 'SystemUserRoles'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("systemuserroles")]
	public partial class SystemUserRoles : GeneratedEntity<SystemUserRoles.RelationName>
	{
		public SystemUserRoles() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public SystemUserRoles(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public SystemUserRoles(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = null;
		public const string SchemaName = "SystemUserRoles";
		public const string EntityLogicalName = "systemuserroles";
		public const int EntityTypeCode = 15;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("systemuserroleid")]
		public override System.Guid Id
		{
			get => (SystemUserRoleIdId == null || SystemUserRoleIdId == Guid.Empty) ? base.Id : SystemUserRoleIdId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("systemuserroleid");
                    base.Id = value;
                } else {
				    SystemUserRoleIdId = value;
                }
			}
		}

		[AttributeLogicalName("roleid")]
		public Guid? RoleId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("roleid");
			    return value;
			}
		}

		[AttributeLogicalName("systemuserid")]
		public Guid? SystemUserId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("systemuserid");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'SystemUserRoleId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("systemuserroleid")]
		public Guid? SystemUserRoleIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("systemuserroleid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("systemuserroleid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:N, 'systemuserroles_association'
		/// </summary>
		[RelationshipSchemaName("systemuserroles_association")]
		public User[] UsersOfsystemuserroles_association

		{
			get => GetRelatedEntities<User>("systemuserroles_association", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("systemuserroles_association", null, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName UsersOfsystemuserroles_association = new RelationName("UsersOfsystemuserroles_association");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["UsersOfsystemuserroles_association"] = new object[] { "UsersOfsystemuserroles_association", "systemuser", "systemuserroles", "systemuserid", "systemuserid", "systemuserroleid", "roleid", "systemuserroles_association", typeof (User[]) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public SystemUserRoles(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["systemuserroleid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string RoleId = "roleid";
			public const string SystemUserId = "systemuserid";
			public const string SystemUserRoleIdId = "systemuserroleid";
			public const string VersionNumber = "versionnumber";

			#endregion
		}

		#endregion

		#endregion
	}

	#endregion

	#region Team

	/// <summary>
	/// 'Team'.<br />
	/// Collection of system users that routinely collaborate. Teams can be used to simplify record sharing and provide team members with common access to organization data when team members belong to different Business Units.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("team")]
	public partial class Team : GeneratedEntity<Team.RelationName>
	{
		public Team() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public Team(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public Team(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "Team";
		public const string SchemaName = "Team";
		public const string EntityLogicalName = "team";
		public const int EntityTypeCode = 9;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Alternate Keys

		public void AddAzureADObjectIdforagroupKey(Guid? value) { KeyAttributes.Add("azureactivedirectoryobjectid", value); }
		public void AddMembershipTypeKey(OptionSetValue value) { KeyAttributes.Add("membershiptype", value); }

		#endregion

		#region Attributes

		[AttributeLogicalName("teamid")]
		public override System.Guid Id
		{
			get => (TeamId == null || TeamId == Guid.Empty) ? base.Id : TeamId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("teamid");
                    base.Id = value;
                } else {
				    TeamId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AdministratorId'.<br />
        /// Unique identifier of the user primary responsible for the team.
        /// </summary>
		[AttributeLogicalName("administratorid")]
		public Guid? Administrator
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("administratorid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("administratorid", new EntityReference("systemuser", value.Value));
                else
	                SetAttributeValue("administratorid", value);
			}
		}

        public string AdministratorName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("administratorid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'AzureActiveDirectoryObjectId'.<br />
        /// The Azure active directory object Id for a group.
        /// </summary>
		[AttributeLogicalName("azureactivedirectoryobjectid")]
		public Guid? AzureADObjectIdforagroup
		{
			get
			{
				var value = GetAttributeValue<Guid?>("azureactivedirectoryobjectid");
			    return value;
			}
			set
			{
                SetAttributeValue("azureactivedirectoryobjectid", value);
			}
		}

        /// <summary>
        ///  
		/// 'BusinessUnitId'.<br />
        /// Unique identifier of the business unit with which the team is associated.
        /// </summary>
		[AttributeLogicalName("businessunitid")]
		public Guid? BusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("businessunitid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("businessunitid", new EntityReference("businessunit", value.Value));
                else
	                SetAttributeValue("businessunitid", value);
			}
		}

        public string BusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("businessunitid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the team.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Id;
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the team was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the team.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Id;
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=2000] 
		/// 'Description'.<br />
        /// Description of the team.
        /// </summary>
		[AttributeLogicalName("description")]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
			    return value;
			}
			set
			{
                SetAttributeValue("description", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'EMailAddress'.<br />
        /// Email address for the team.
        /// </summary>
		[AttributeLogicalName("emailaddress")]
		public string Email
		{
			get
			{
				var value = GetAttributeValue<string>("emailaddress");
			    return value;
			}
			set
			{
                SetAttributeValue("emailaddress", value);
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Exchange rate for the currency associated with the team with respect to the base currency.
        /// </summary>
		[AttributeLogicalName("exchangerate")]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
			    return value;
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Unique identifier of the data import or data migration that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber")]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
			    return value;
			}
			set
			{
                SetAttributeValue("importsequencenumber", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsDefault'.<br />
        /// Information about whether the team is a default business unit team.
        /// </summary>
		[AttributeLogicalName("isdefault")]
		public bool? IsDefault
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdefault");
			    return value;
			}
		}

		[AttributeLogicalName("membershiptype")]
		public MembershipTypeEnum? MembershipType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("membershiptype");
				return (MembershipTypeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("membershiptype", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("membershiptype", value);
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the team.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Id;
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the team was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the team.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Id;
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=160] 
		/// 'Name'.<br />
        /// Name of the team.
        /// </summary>
		[AttributeLogicalName("name")]
		public string TeamName
		{
			get
			{
				var value = GetAttributeValue<string>("name");
			    return value;
			}
			set
			{
                SetAttributeValue("name", value);
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization associated with the team.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? Organization
		{
			get
			{
				var value = GetAttributeValue<Guid?>("organizationid");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
			    return value;
			}
			set
			{
                SetAttributeValue("overriddencreatedon", value);
			}
		}

        /// <summary>
        ///  
		/// 'ProcessId'.<br />
        /// Shows the ID of the process.
        /// </summary>
		[AttributeLogicalName("processid")]
		public Guid? Process
		{
			get
			{
				var value = GetAttributeValue<Guid?>("processid");
			    return value;
			}
			set
			{
                SetAttributeValue("processid", value);
			}
		}

        /// <summary>
        ///  
		/// 'QueueId'.<br />
        /// Unique identifier of the default queue for the team.
        /// </summary>
		[AttributeLogicalName("queueid")]
		public Guid? DefaultQueue
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("queueid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("queueid", new EntityReference("queue", value.Value));
                else
	                SetAttributeValue("queueid", value);
			}
		}

        public string DefaultQueueName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("queueid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'RegardingObjectId'.<br />
        /// opportunity_Teams
        /// </summary>
		[AttributeLogicalName("regardingobjectid")]
		public EntityReference RegardingObjectId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("regardingobjectid");
			    return value;
			}
			set
			{
                SetAttributeValue("regardingobjectid", value);
			}
		}

        public string RegardingObjectIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("regardingobjectid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'StageId'.<br />
        /// Shows the ID of the stage.
        /// </summary>
		[AttributeLogicalName("stageid")]
		public Guid? __DeprecatedProcessStage
		{
			get
			{
				var value = GetAttributeValue<Guid?>("stageid");
			    return value;
			}
			set
			{
                SetAttributeValue("stageid", value);
			}
		}

        /// <summary>
        ///  
		/// 'SystemManaged'.<br />
        /// Select whether the team will be managed by the system.
        /// </summary>
		[AttributeLogicalName("systemmanaged")]
		public bool? IsSystemManaged
		{
			get
			{
				var value = GetAttributeValue<bool?>("systemmanaged");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'TeamId'.<br />
        /// Unique identifier for the team.
        /// </summary>
		[AttributeLogicalName("teamid")]
		public Guid? TeamId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("teamid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("teamid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

        /// <summary>
        ///  
		/// 'TeamTemplateId'.<br />
        /// Shows the team template that is associated with the team.
        /// </summary>
		[AttributeLogicalName("teamtemplateid")]
		public Guid? TeamTemplateIdentifier
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("teamtemplateid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("teamtemplateid", new EntityReference("teamtemplate", value.Value));
                else
	                SetAttributeValue("teamtemplateid", value);
			}
		}

        public string TeamTemplateIdentifierName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("teamtemplateid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'TeamType'.<br />
        /// Select the team type.
        /// </summary>
		[AttributeLogicalName("teamtype")]
		public TeamTypeEnum? TeamType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("teamtype");
				return (TeamTypeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("teamtype", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("teamtype", value);
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Unique identifier of the currency associated with the team.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? Currency
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
	                SetAttributeValue("transactioncurrencyid", value);
			}
		}

        public string CurrencyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=1250] 
		/// 'TraversedPath'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("traversedpath")]
		public string __DeprecatedTraversedPath
		{
			get
			{
				var value = GetAttributeValue<string>("traversedpath");
			    return value;
			}
			set
			{
                SetAttributeValue("traversedpath", value);
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version number of the team.
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? Versionnumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=160] 
		/// 'YomiName'.<br />
        /// Pronunciation of the full name of the team, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yominame")]
		public string YomiName
		{
			get
			{
				var value = GetAttributeValue<string>("yominame");
			    return value;
			}
			set
			{
                SetAttributeValue("yominame", value);
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:1, 'lk_team_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_team_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get => GetRelatedEntity<User>("lk_team_createdonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_team_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_team_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_team_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get => GetRelatedEntity<User>("lk_team_modifiedonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_team_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_teambase_administratorid'
		/// </summary>
		[RelationshipSchemaName("lk_teambase_administratorid"), AttributeLogicalName("administratorid")]
		public User UserAsAdministrator
		{
			get => GetRelatedEntity<User>("lk_teambase_administratorid", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_teambase_administratorid", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_teambase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_teambase_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get => GetRelatedEntity<User>("lk_teambase_createdby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_teambase_createdby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_teambase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_teambase_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get => GetRelatedEntity<User>("lk_teambase_modifiedby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_teambase_modifiedby", null, value);
			}
		}
		
		/// <summary>
		/// N:N, 'teammembership_association'
		/// </summary>
		[RelationshipSchemaName("teammembership_association")]
		public User[] UsersOfteammembership_association

		{
			get => GetRelatedEntities<User>("teammembership_association", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("teammembership_association", null, value);
			}
		}
		
		/// <summary>
		/// N:N, 'teamroles_association'
		/// </summary>
		[RelationshipSchemaName("teamroles_association")]
		public SecurityRole[] SecurityRolesOfteamroles_association

		{
			get => GetRelatedEntities<SecurityRole>("teamroles_association", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("teamroles_association", null, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsAdministrator = new RelationName("UserAsAdministrator");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UsersOfteammembership_association = new RelationName("UsersOfteammembership_association");
			public static RelationName SecurityRolesOfteamroles_association = new RelationName("SecurityRolesOfteamroles_association");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "team", "systemuserid", "createdonbehalfby", "teamid", "teamid", "lk_team_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "team", "systemuserid", "modifiedonbehalfby", "teamid", "teamid", "lk_team_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsAdministrator"] = new object[] { "UserAsAdministrator", "systemuser", "team", "systemuserid", "administratorid", "teamid", "teamid", "lk_teambase_administratorid", typeof (User) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "team", "systemuserid", "createdby", "teamid", "teamid", "lk_teambase_createdby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "team", "systemuserid", "modifiedby", "teamid", "teamid", "lk_teambase_modifiedby", typeof (User) };
			relationProperties["UsersOfteammembership_association"] = new object[] { "UsersOfteammembership_association", "systemuser", "teammembership", "systemuserid", "systemuserid", "teamid", "teamid", "teammembership_association", typeof (User[]) };
			relationProperties["SecurityRolesOfteamroles_association"] = new object[] { "SecurityRolesOfteamroles_association", "role", "teamroles", "roleid", "roleid", "teamid", "teamid", "teamroles_association", typeof (SecurityRole[]) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public Team(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["teamid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		public enum IsDefaultEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum MembershipTypeEnum
		{
			Membersandguests = 0,
			Members = 1,
			Owners = 2,
			Guests = 3,
		}
	
		public enum IsSystemManagedEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum TeamTypeEnum
		{
			Owner = 0,
			Access = 1,
			AADSecurityGroup = 2,
			AADOfficeGroup = 3,
		}
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string Administrator = "administratorid";
			public const string AzureADObjectIdforagroup = "azureactivedirectoryobjectid";
			public const string BusinessUnit = "businessunitid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string Description = "description";
			public const string Email = "emailaddress";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsDefault = "isdefault";
			public const string MembershipType = "membershiptype";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string TeamName = "name";
			public const string Organization = "organizationid";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Process = "processid";
			public const string DefaultQueue = "queueid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string __DeprecatedProcessStage = "stageid";
			public const string IsSystemManaged = "systemmanaged";
			public const string TeamId = "teamid";
			public const string TeamTemplateIdentifier = "teamtemplateid";
			public const string TeamType = "teamtype";
			public const string Currency = "transactioncurrencyid";
			public const string __DeprecatedTraversedPath = "traversedpath";
			public const string Versionnumber = "versionnumber";
			public const string YomiName = "yominame";

			#endregion
		}

		#endregion

		#endregion
	}

	#endregion

	#region TeamMembership

	/// <summary>
	/// 'TeamMembership'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("teammembership")]
	public partial class TeamMembership : GeneratedEntity<TeamMembership.RelationName>
	{
		public TeamMembership() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public TeamMembership(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public TeamMembership(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = null;
		public const string SchemaName = "TeamMembership";
		public const string EntityLogicalName = "teammembership";
		public const int EntityTypeCode = 23;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("teammembershipid")]
		public override System.Guid Id
		{
			get => (TeamMembershipIdId == null || TeamMembershipIdId == Guid.Empty) ? base.Id : TeamMembershipIdId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("teammembershipid");
                    base.Id = value;
                } else {
				    TeamMembershipIdId = value;
                }
			}
		}

		[AttributeLogicalName("systemuserid")]
		public Guid? SystemUserId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("systemuserid");
			    return value;
			}
		}

		[AttributeLogicalName("teamid")]
		public Guid? TeamId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("teamid");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'TeamMembershipId'.<br />
        /// Unique identifier of the team membership.
        /// </summary>
		[AttributeLogicalName("teammembershipid")]
		public Guid? TeamMembershipIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("teammembershipid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("teammembershipid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:N, 'teammembership_association'
		/// </summary>
		[RelationshipSchemaName("teammembership_association")]
		public Team[] TeamsOfteammembership_association

		{
			get => GetRelatedEntities<Team>("teammembership_association", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("teammembership_association", null, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName TeamsOfteammembership_association = new RelationName("TeamsOfteammembership_association");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["TeamsOfteammembership_association"] = new object[] { "TeamsOfteammembership_association", "team", "teammembership", "teamid", "teamid", "teammembershipid", "systemuserid", "teammembership_association", typeof (Team[]) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public TeamMembership(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["teammembershipid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string SystemUserId = "systemuserid";
			public const string TeamId = "teamid";
			public const string TeamMembershipIdId = "teammembershipid";
			public const string VersionNumber = "versionnumber";

			#endregion
		}

		#endregion

		#endregion
	}

	#endregion

	#region TeamRoles

	/// <summary>
	/// 'TeamRoles'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("teamroles")]
	public partial class TeamRoles : GeneratedEntity<TeamRoles.RelationName>
	{
		public TeamRoles() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public TeamRoles(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public TeamRoles(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = null;
		public const string SchemaName = "TeamRoles";
		public const string EntityLogicalName = "teamroles";
		public const int EntityTypeCode = 40;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}
		#region Metadata


		#endregion
	}

	#endregion

	#endregion

	#region GlobalEnums

	public class GlobalEnums
	{
		public enum ComponentState
		{
			Published = 0,
			Unpublished = 1,
			Deleted = 2,
			DeletedUnpublished = 3,
		}

		public enum IsInherited
		{
			Teamprivilegesonly = 0,
			DirectUserBasicaccesslevelandTeamprivileges = 1,
		}

	}

	#endregion

}

